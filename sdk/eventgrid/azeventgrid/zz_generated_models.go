// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azeventgrid

import (
	"encoding/json"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
	"time"
)

// AcsChatEventBase - Schema of common properties of all chat events
type AcsChatEventBase struct {
	// The communication identifier of the target user
	RecipientCommunicationIdentifier *CommunicationIdentifierModel `json:"recipientCommunicationIdentifier,omitempty"`

	// The chat thread id
	ThreadID *string `json:"threadId,omitempty"`

	// The transaction id will be used as co-relation vector
	TransactionID *string `json:"transactionId,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AcsChatEventBase.
func (a AcsChatEventBase) MarshalJSON() ([]byte, error) {
	objectMap := a.marshalInternal()
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AcsChatEventBase.
func (a *AcsChatEventBase) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return a.unmarshalInternal(rawMsg)
}

func (a AcsChatEventBase) marshalInternal() map[string]interface{} {
	objectMap := make(map[string]interface{})
	populate(objectMap, "recipientCommunicationIdentifier", a.RecipientCommunicationIdentifier)
	populate(objectMap, "threadId", a.ThreadID)
	populate(objectMap, "transactionId", a.TransactionID)
	return objectMap
}

func (a *AcsChatEventBase) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "recipientCommunicationIdentifier":
				err = unpopulate(val, &a.RecipientCommunicationIdentifier)
				delete(rawMsg, key)
		case "threadId":
				err = unpopulate(val, &a.ThreadID)
				delete(rawMsg, key)
		case "transactionId":
				err = unpopulate(val, &a.TransactionID)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// AcsChatEventInThreadBase - Schema of common properties of all thread-level chat events
type AcsChatEventInThreadBase struct {
	// The chat thread id
	ThreadID *string `json:"threadId,omitempty"`

	// The transaction id will be used as co-relation vector
	TransactionID *string `json:"transactionId,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AcsChatEventInThreadBase.
func (a AcsChatEventInThreadBase) MarshalJSON() ([]byte, error) {
	objectMap := a.marshalInternal()
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AcsChatEventInThreadBase.
func (a *AcsChatEventInThreadBase) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return a.unmarshalInternal(rawMsg)
}

func (a AcsChatEventInThreadBase) marshalInternal() map[string]interface{} {
	objectMap := make(map[string]interface{})
	populate(objectMap, "threadId", a.ThreadID)
	populate(objectMap, "transactionId", a.TransactionID)
	return objectMap
}

func (a *AcsChatEventInThreadBase) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "threadId":
				err = unpopulate(val, &a.ThreadID)
				delete(rawMsg, key)
		case "transactionId":
				err = unpopulate(val, &a.TransactionID)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// AcsChatMessageDeletedEventData - Schema of the Data property of an EventGridEvent for a Microsoft.Communication.ChatMessageDeleted event.
type AcsChatMessageDeletedEventData struct {
	AcsChatMessageEventBase
	// The time at which the message was deleted
	DeleteTime *time.Time `json:"deleteTime,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AcsChatMessageDeletedEventData.
func (a AcsChatMessageDeletedEventData) MarshalJSON() ([]byte, error) {
	objectMap := a.AcsChatMessageEventBase.marshalInternal()
	populate(objectMap, "deleteTime", (*timeRFC3339)(a.DeleteTime))
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AcsChatMessageDeletedEventData.
func (a *AcsChatMessageDeletedEventData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "deleteTime":
				var aux timeRFC3339
				err = unpopulate(val, &aux)
				a.DeleteTime = (*time.Time)(&aux)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return a.AcsChatMessageEventBase.unmarshalInternal(rawMsg)
}

// AcsChatMessageDeletedInThreadEventData - Schema of the Data property of an EventGridEvent for a Microsoft.Communication.ChatMessageDeletedInThread event.
type AcsChatMessageDeletedInThreadEventData struct {
	AcsChatMessageEventInThreadBase
	// The time at which the message was deleted
	DeleteTime *time.Time `json:"deleteTime,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AcsChatMessageDeletedInThreadEventData.
func (a AcsChatMessageDeletedInThreadEventData) MarshalJSON() ([]byte, error) {
	objectMap := a.AcsChatMessageEventInThreadBase.marshalInternal()
	populate(objectMap, "deleteTime", (*timeRFC3339)(a.DeleteTime))
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AcsChatMessageDeletedInThreadEventData.
func (a *AcsChatMessageDeletedInThreadEventData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "deleteTime":
				var aux timeRFC3339
				err = unpopulate(val, &aux)
				a.DeleteTime = (*time.Time)(&aux)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return a.AcsChatMessageEventInThreadBase.unmarshalInternal(rawMsg)
}

// AcsChatMessageEditedEventData - Schema of the Data property of an EventGridEvent for a Microsoft.Communication.ChatMessageEdited event.
type AcsChatMessageEditedEventData struct {
	AcsChatMessageEventBase
	// The time at which the message was edited
	EditTime *time.Time `json:"editTime,omitempty"`

	// The body of the chat message
	MessageBody *string `json:"messageBody,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AcsChatMessageEditedEventData.
func (a AcsChatMessageEditedEventData) MarshalJSON() ([]byte, error) {
	objectMap := a.AcsChatMessageEventBase.marshalInternal()
	populate(objectMap, "editTime", (*timeRFC3339)(a.EditTime))
	populate(objectMap, "messageBody", a.MessageBody)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AcsChatMessageEditedEventData.
func (a *AcsChatMessageEditedEventData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "editTime":
				var aux timeRFC3339
				err = unpopulate(val, &aux)
				a.EditTime = (*time.Time)(&aux)
				delete(rawMsg, key)
		case "messageBody":
				err = unpopulate(val, &a.MessageBody)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return a.AcsChatMessageEventBase.unmarshalInternal(rawMsg)
}

// AcsChatMessageEditedInThreadEventData - Schema of the Data property of an EventGridEvent for a Microsoft.Communication.ChatMessageEditedInThread event.
type AcsChatMessageEditedInThreadEventData struct {
	AcsChatMessageEventInThreadBase
	// The time at which the message was edited
	EditTime *time.Time `json:"editTime,omitempty"`

	// The body of the chat message
	MessageBody *string `json:"messageBody,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AcsChatMessageEditedInThreadEventData.
func (a AcsChatMessageEditedInThreadEventData) MarshalJSON() ([]byte, error) {
	objectMap := a.AcsChatMessageEventInThreadBase.marshalInternal()
	populate(objectMap, "editTime", (*timeRFC3339)(a.EditTime))
	populate(objectMap, "messageBody", a.MessageBody)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AcsChatMessageEditedInThreadEventData.
func (a *AcsChatMessageEditedInThreadEventData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "editTime":
				var aux timeRFC3339
				err = unpopulate(val, &aux)
				a.EditTime = (*time.Time)(&aux)
				delete(rawMsg, key)
		case "messageBody":
				err = unpopulate(val, &a.MessageBody)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return a.AcsChatMessageEventInThreadBase.unmarshalInternal(rawMsg)
}

// AcsChatMessageEventBase - Schema of common properties of all chat message events
type AcsChatMessageEventBase struct {
	AcsChatEventBase
	// The original compose time of the message
	ComposeTime *time.Time `json:"composeTime,omitempty"`

	// The chat message id
	MessageID *string `json:"messageId,omitempty"`

	// The communication identifier of the sender
	SenderCommunicationIdentifier *CommunicationIdentifierModel `json:"senderCommunicationIdentifier,omitempty"`

	// The display name of the sender
	SenderDisplayName *string `json:"senderDisplayName,omitempty"`

	// The type of the message
	Type *string `json:"type,omitempty"`

	// The version of the message
	Version *int64 `json:"version,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AcsChatMessageEventBase.
func (a AcsChatMessageEventBase) MarshalJSON() ([]byte, error) {
	objectMap := a.marshalInternal()
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AcsChatMessageEventBase.
func (a *AcsChatMessageEventBase) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return a.unmarshalInternal(rawMsg)
}

func (a AcsChatMessageEventBase) marshalInternal() map[string]interface{} {
	objectMap := a.AcsChatEventBase.marshalInternal()
	populate(objectMap, "composeTime", (*timeRFC3339)(a.ComposeTime))
	populate(objectMap, "messageId", a.MessageID)
	populate(objectMap, "senderCommunicationIdentifier", a.SenderCommunicationIdentifier)
	populate(objectMap, "senderDisplayName", a.SenderDisplayName)
	populate(objectMap, "type", a.Type)
	populate(objectMap, "version", a.Version)
	return objectMap
}

func (a *AcsChatMessageEventBase) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "composeTime":
				var aux timeRFC3339
				err = unpopulate(val, &aux)
				a.ComposeTime = (*time.Time)(&aux)
				delete(rawMsg, key)
		case "messageId":
				err = unpopulate(val, &a.MessageID)
				delete(rawMsg, key)
		case "senderCommunicationIdentifier":
				err = unpopulate(val, &a.SenderCommunicationIdentifier)
				delete(rawMsg, key)
		case "senderDisplayName":
				err = unpopulate(val, &a.SenderDisplayName)
				delete(rawMsg, key)
		case "type":
				err = unpopulate(val, &a.Type)
				delete(rawMsg, key)
		case "version":
				err = unpopulate(val, &a.Version)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return a.AcsChatEventBase.unmarshalInternal(rawMsg)
}

// AcsChatMessageEventInThreadBase - Schema of common properties of all thread-level chat message events
type AcsChatMessageEventInThreadBase struct {
	AcsChatEventInThreadBase
	// The original compose time of the message
	ComposeTime *time.Time `json:"composeTime,omitempty"`

	// The chat message id
	MessageID *string `json:"messageId,omitempty"`

	// The communication identifier of the sender
	SenderCommunicationIdentifier *CommunicationIdentifierModel `json:"senderCommunicationIdentifier,omitempty"`

	// The display name of the sender
	SenderDisplayName *string `json:"senderDisplayName,omitempty"`

	// The type of the message
	Type *string `json:"type,omitempty"`

	// The version of the message
	Version *int64 `json:"version,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AcsChatMessageEventInThreadBase.
func (a AcsChatMessageEventInThreadBase) MarshalJSON() ([]byte, error) {
	objectMap := a.marshalInternal()
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AcsChatMessageEventInThreadBase.
func (a *AcsChatMessageEventInThreadBase) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return a.unmarshalInternal(rawMsg)
}

func (a AcsChatMessageEventInThreadBase) marshalInternal() map[string]interface{} {
	objectMap := a.AcsChatEventInThreadBase.marshalInternal()
	populate(objectMap, "composeTime", (*timeRFC3339)(a.ComposeTime))
	populate(objectMap, "messageId", a.MessageID)
	populate(objectMap, "senderCommunicationIdentifier", a.SenderCommunicationIdentifier)
	populate(objectMap, "senderDisplayName", a.SenderDisplayName)
	populate(objectMap, "type", a.Type)
	populate(objectMap, "version", a.Version)
	return objectMap
}

func (a *AcsChatMessageEventInThreadBase) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "composeTime":
				var aux timeRFC3339
				err = unpopulate(val, &aux)
				a.ComposeTime = (*time.Time)(&aux)
				delete(rawMsg, key)
		case "messageId":
				err = unpopulate(val, &a.MessageID)
				delete(rawMsg, key)
		case "senderCommunicationIdentifier":
				err = unpopulate(val, &a.SenderCommunicationIdentifier)
				delete(rawMsg, key)
		case "senderDisplayName":
				err = unpopulate(val, &a.SenderDisplayName)
				delete(rawMsg, key)
		case "type":
				err = unpopulate(val, &a.Type)
				delete(rawMsg, key)
		case "version":
				err = unpopulate(val, &a.Version)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return a.AcsChatEventInThreadBase.unmarshalInternal(rawMsg)
}

// AcsChatMessageReceivedEventData - Schema of the Data property of an EventGridEvent for a Microsoft.Communication.ChatMessageReceived event.
type AcsChatMessageReceivedEventData struct {
	AcsChatMessageEventBase
	// The body of the chat message
	MessageBody *string `json:"messageBody,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AcsChatMessageReceivedEventData.
func (a AcsChatMessageReceivedEventData) MarshalJSON() ([]byte, error) {
	objectMap := a.AcsChatMessageEventBase.marshalInternal()
	populate(objectMap, "messageBody", a.MessageBody)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AcsChatMessageReceivedEventData.
func (a *AcsChatMessageReceivedEventData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "messageBody":
				err = unpopulate(val, &a.MessageBody)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return a.AcsChatMessageEventBase.unmarshalInternal(rawMsg)
}

// AcsChatMessageReceivedInThreadEventData - Schema of the Data property of an EventGridEvent for a Microsoft.Communication.ChatMessageReceivedInThread
// event.
type AcsChatMessageReceivedInThreadEventData struct {
	AcsChatMessageEventInThreadBase
	// The body of the chat message
	MessageBody *string `json:"messageBody,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AcsChatMessageReceivedInThreadEventData.
func (a AcsChatMessageReceivedInThreadEventData) MarshalJSON() ([]byte, error) {
	objectMap := a.AcsChatMessageEventInThreadBase.marshalInternal()
	populate(objectMap, "messageBody", a.MessageBody)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AcsChatMessageReceivedInThreadEventData.
func (a *AcsChatMessageReceivedInThreadEventData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "messageBody":
				err = unpopulate(val, &a.MessageBody)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return a.AcsChatMessageEventInThreadBase.unmarshalInternal(rawMsg)
}

// AcsChatParticipantAddedToThreadEventData - Schema of the Data property of an EventGridEvent for a Microsoft.Communication.ChatThreadParticipantAdded
// event.
type AcsChatParticipantAddedToThreadEventData struct {
	AcsChatEventInThreadBase
	// The communication identifier of the user who added the user
	AddedByCommunicationIdentifier *CommunicationIdentifierModel `json:"addedByCommunicationIdentifier,omitempty"`

	// The details of the user who was added
	ParticipantAdded *AcsChatThreadParticipant `json:"participantAdded,omitempty"`

	// The time at which the user was added to the thread
	Time *time.Time `json:"time,omitempty"`

	// The version of the thread
	Version *int64 `json:"version,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AcsChatParticipantAddedToThreadEventData.
func (a AcsChatParticipantAddedToThreadEventData) MarshalJSON() ([]byte, error) {
	objectMap := a.AcsChatEventInThreadBase.marshalInternal()
	populate(objectMap, "addedByCommunicationIdentifier", a.AddedByCommunicationIdentifier)
	populate(objectMap, "participantAdded", a.ParticipantAdded)
	populate(objectMap, "time", (*timeRFC3339)(a.Time))
	populate(objectMap, "version", a.Version)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AcsChatParticipantAddedToThreadEventData.
func (a *AcsChatParticipantAddedToThreadEventData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "addedByCommunicationIdentifier":
				err = unpopulate(val, &a.AddedByCommunicationIdentifier)
				delete(rawMsg, key)
		case "participantAdded":
				err = unpopulate(val, &a.ParticipantAdded)
				delete(rawMsg, key)
		case "time":
				var aux timeRFC3339
				err = unpopulate(val, &aux)
				a.Time = (*time.Time)(&aux)
				delete(rawMsg, key)
		case "version":
				err = unpopulate(val, &a.Version)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return a.AcsChatEventInThreadBase.unmarshalInternal(rawMsg)
}

// AcsChatParticipantAddedToThreadWithUserEventData - Schema of the Data property of an EventGridEvent for a Microsoft.Communication.ChatParticipantAddedToThreadWithUser
// event.
type AcsChatParticipantAddedToThreadWithUserEventData struct {
	AcsChatThreadEventBase
	// The communication identifier of the user who added the user
	AddedByCommunicationIdentifier *CommunicationIdentifierModel `json:"addedByCommunicationIdentifier,omitempty"`

	// The details of the user who was added
	ParticipantAdded *AcsChatThreadParticipant `json:"participantAdded,omitempty"`

	// The time at which the user was added to the thread
	Time *time.Time `json:"time,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AcsChatParticipantAddedToThreadWithUserEventData.
func (a AcsChatParticipantAddedToThreadWithUserEventData) MarshalJSON() ([]byte, error) {
	objectMap := a.AcsChatThreadEventBase.marshalInternal()
	populate(objectMap, "addedByCommunicationIdentifier", a.AddedByCommunicationIdentifier)
	populate(objectMap, "participantAdded", a.ParticipantAdded)
	populate(objectMap, "time", (*timeRFC3339)(a.Time))
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AcsChatParticipantAddedToThreadWithUserEventData.
func (a *AcsChatParticipantAddedToThreadWithUserEventData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "addedByCommunicationIdentifier":
				err = unpopulate(val, &a.AddedByCommunicationIdentifier)
				delete(rawMsg, key)
		case "participantAdded":
				err = unpopulate(val, &a.ParticipantAdded)
				delete(rawMsg, key)
		case "time":
				var aux timeRFC3339
				err = unpopulate(val, &aux)
				a.Time = (*time.Time)(&aux)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return a.AcsChatThreadEventBase.unmarshalInternal(rawMsg)
}

// AcsChatParticipantRemovedFromThreadEventData - Schema of the Data property of an EventGridEvent for a Microsoft.Communication.ChatThreadParticipantRemoved
// event.
type AcsChatParticipantRemovedFromThreadEventData struct {
	AcsChatEventInThreadBase
	// The details of the user who was removed
	ParticipantRemoved *AcsChatThreadParticipant `json:"participantRemoved,omitempty"`

	// The communication identifier of the user who removed the user
	RemovedByCommunicationIdentifier *CommunicationIdentifierModel `json:"removedByCommunicationIdentifier,omitempty"`

	// The time at which the user was removed to the thread
	Time *time.Time `json:"time,omitempty"`

	// The version of the thread
	Version *int64 `json:"version,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AcsChatParticipantRemovedFromThreadEventData.
func (a AcsChatParticipantRemovedFromThreadEventData) MarshalJSON() ([]byte, error) {
	objectMap := a.AcsChatEventInThreadBase.marshalInternal()
	populate(objectMap, "participantRemoved", a.ParticipantRemoved)
	populate(objectMap, "removedByCommunicationIdentifier", a.RemovedByCommunicationIdentifier)
	populate(objectMap, "time", (*timeRFC3339)(a.Time))
	populate(objectMap, "version", a.Version)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AcsChatParticipantRemovedFromThreadEventData.
func (a *AcsChatParticipantRemovedFromThreadEventData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "participantRemoved":
				err = unpopulate(val, &a.ParticipantRemoved)
				delete(rawMsg, key)
		case "removedByCommunicationIdentifier":
				err = unpopulate(val, &a.RemovedByCommunicationIdentifier)
				delete(rawMsg, key)
		case "time":
				var aux timeRFC3339
				err = unpopulate(val, &aux)
				a.Time = (*time.Time)(&aux)
				delete(rawMsg, key)
		case "version":
				err = unpopulate(val, &a.Version)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return a.AcsChatEventInThreadBase.unmarshalInternal(rawMsg)
}

// AcsChatParticipantRemovedFromThreadWithUserEventData - Schema of the Data property of an EventGridEvent for a Microsoft.Communication.ChatParticipantRemovedFromThreadWithUser
// event.
type AcsChatParticipantRemovedFromThreadWithUserEventData struct {
	AcsChatThreadEventBase
	// The details of the user who was removed
	ParticipantRemoved *AcsChatThreadParticipant `json:"participantRemoved,omitempty"`

	// The communication identifier of the user who removed the user
	RemovedByCommunicationIdentifier *CommunicationIdentifierModel `json:"removedByCommunicationIdentifier,omitempty"`

	// The time at which the user was removed to the thread
	Time *time.Time `json:"time,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AcsChatParticipantRemovedFromThreadWithUserEventData.
func (a AcsChatParticipantRemovedFromThreadWithUserEventData) MarshalJSON() ([]byte, error) {
	objectMap := a.AcsChatThreadEventBase.marshalInternal()
	populate(objectMap, "participantRemoved", a.ParticipantRemoved)
	populate(objectMap, "removedByCommunicationIdentifier", a.RemovedByCommunicationIdentifier)
	populate(objectMap, "time", (*timeRFC3339)(a.Time))
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AcsChatParticipantRemovedFromThreadWithUserEventData.
func (a *AcsChatParticipantRemovedFromThreadWithUserEventData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "participantRemoved":
				err = unpopulate(val, &a.ParticipantRemoved)
				delete(rawMsg, key)
		case "removedByCommunicationIdentifier":
				err = unpopulate(val, &a.RemovedByCommunicationIdentifier)
				delete(rawMsg, key)
		case "time":
				var aux timeRFC3339
				err = unpopulate(val, &aux)
				a.Time = (*time.Time)(&aux)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return a.AcsChatThreadEventBase.unmarshalInternal(rawMsg)
}

// AcsChatThreadCreatedEventData - Schema of the Data property of an EventGridEvent for a Microsoft.Communication.ChatThreadCreated event.
type AcsChatThreadCreatedEventData struct {
	AcsChatThreadEventInThreadBase
	// The communication identifier of the user who created the thread
	CreatedByCommunicationIdentifier *CommunicationIdentifierModel `json:"createdByCommunicationIdentifier,omitempty"`

	// The list of properties of participants who are part of the thread
	Participants []*AcsChatThreadParticipant `json:"participants,omitempty"`

	// The thread properties
	Properties map[string]interface{} `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AcsChatThreadCreatedEventData.
func (a AcsChatThreadCreatedEventData) MarshalJSON() ([]byte, error) {
	objectMap := a.AcsChatThreadEventInThreadBase.marshalInternal()
	populate(objectMap, "createdByCommunicationIdentifier", a.CreatedByCommunicationIdentifier)
	populate(objectMap, "participants", a.Participants)
	populate(objectMap, "properties", a.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AcsChatThreadCreatedEventData.
func (a *AcsChatThreadCreatedEventData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdByCommunicationIdentifier":
				err = unpopulate(val, &a.CreatedByCommunicationIdentifier)
				delete(rawMsg, key)
		case "participants":
				err = unpopulate(val, &a.Participants)
				delete(rawMsg, key)
		case "properties":
				err = unpopulate(val, &a.Properties)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return a.AcsChatThreadEventInThreadBase.unmarshalInternal(rawMsg)
}

// AcsChatThreadCreatedWithUserEventData - Schema of the Data property of an EventGridEvent for a Microsoft.Communication.ChatThreadCreatedWithUser event.
type AcsChatThreadCreatedWithUserEventData struct {
	AcsChatThreadEventBase
	// The communication identifier of the user who created the thread
	CreatedByCommunicationIdentifier *CommunicationIdentifierModel `json:"createdByCommunicationIdentifier,omitempty"`

	// The list of properties of participants who are part of the thread
	Participants []*AcsChatThreadParticipant `json:"participants,omitempty"`

	// The thread properties
	Properties map[string]interface{} `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AcsChatThreadCreatedWithUserEventData.
func (a AcsChatThreadCreatedWithUserEventData) MarshalJSON() ([]byte, error) {
	objectMap := a.AcsChatThreadEventBase.marshalInternal()
	populate(objectMap, "createdByCommunicationIdentifier", a.CreatedByCommunicationIdentifier)
	populate(objectMap, "participants", a.Participants)
	populate(objectMap, "properties", a.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AcsChatThreadCreatedWithUserEventData.
func (a *AcsChatThreadCreatedWithUserEventData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdByCommunicationIdentifier":
				err = unpopulate(val, &a.CreatedByCommunicationIdentifier)
				delete(rawMsg, key)
		case "participants":
				err = unpopulate(val, &a.Participants)
				delete(rawMsg, key)
		case "properties":
				err = unpopulate(val, &a.Properties)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return a.AcsChatThreadEventBase.unmarshalInternal(rawMsg)
}

// AcsChatThreadDeletedEventData - Schema of the Data property of an EventGridEvent for a Microsoft.Communication.ChatThreadDeleted event.
type AcsChatThreadDeletedEventData struct {
	AcsChatThreadEventInThreadBase
	// The deletion time of the thread
	DeleteTime *time.Time `json:"deleteTime,omitempty"`

	// The communication identifier of the user who deleted the thread
	DeletedByCommunicationIdentifier *CommunicationIdentifierModel `json:"deletedByCommunicationIdentifier,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AcsChatThreadDeletedEventData.
func (a AcsChatThreadDeletedEventData) MarshalJSON() ([]byte, error) {
	objectMap := a.AcsChatThreadEventInThreadBase.marshalInternal()
	populate(objectMap, "deleteTime", (*timeRFC3339)(a.DeleteTime))
	populate(objectMap, "deletedByCommunicationIdentifier", a.DeletedByCommunicationIdentifier)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AcsChatThreadDeletedEventData.
func (a *AcsChatThreadDeletedEventData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "deleteTime":
				var aux timeRFC3339
				err = unpopulate(val, &aux)
				a.DeleteTime = (*time.Time)(&aux)
				delete(rawMsg, key)
		case "deletedByCommunicationIdentifier":
				err = unpopulate(val, &a.DeletedByCommunicationIdentifier)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return a.AcsChatThreadEventInThreadBase.unmarshalInternal(rawMsg)
}

// AcsChatThreadEventBase - Schema of common properties of all chat thread events
type AcsChatThreadEventBase struct {
	AcsChatEventBase
	// The original creation time of the thread
	CreateTime *time.Time `json:"createTime,omitempty"`

	// The version of the thread
	Version *int64 `json:"version,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AcsChatThreadEventBase.
func (a AcsChatThreadEventBase) MarshalJSON() ([]byte, error) {
	objectMap := a.marshalInternal()
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AcsChatThreadEventBase.
func (a *AcsChatThreadEventBase) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return a.unmarshalInternal(rawMsg)
}

func (a AcsChatThreadEventBase) marshalInternal() map[string]interface{} {
	objectMap := a.AcsChatEventBase.marshalInternal()
	populate(objectMap, "createTime", (*timeRFC3339)(a.CreateTime))
	populate(objectMap, "version", a.Version)
	return objectMap
}

func (a *AcsChatThreadEventBase) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createTime":
				var aux timeRFC3339
				err = unpopulate(val, &aux)
				a.CreateTime = (*time.Time)(&aux)
				delete(rawMsg, key)
		case "version":
				err = unpopulate(val, &a.Version)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return a.AcsChatEventBase.unmarshalInternal(rawMsg)
}

// AcsChatThreadEventInThreadBase - Schema of common properties of all chat thread events
type AcsChatThreadEventInThreadBase struct {
	AcsChatEventInThreadBase
	// The original creation time of the thread
	CreateTime *time.Time `json:"createTime,omitempty"`

	// The version of the thread
	Version *int64 `json:"version,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AcsChatThreadEventInThreadBase.
func (a AcsChatThreadEventInThreadBase) MarshalJSON() ([]byte, error) {
	objectMap := a.marshalInternal()
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AcsChatThreadEventInThreadBase.
func (a *AcsChatThreadEventInThreadBase) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return a.unmarshalInternal(rawMsg)
}

func (a AcsChatThreadEventInThreadBase) marshalInternal() map[string]interface{} {
	objectMap := a.AcsChatEventInThreadBase.marshalInternal()
	populate(objectMap, "createTime", (*timeRFC3339)(a.CreateTime))
	populate(objectMap, "version", a.Version)
	return objectMap
}

func (a *AcsChatThreadEventInThreadBase) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createTime":
				var aux timeRFC3339
				err = unpopulate(val, &aux)
				a.CreateTime = (*time.Time)(&aux)
				delete(rawMsg, key)
		case "version":
				err = unpopulate(val, &a.Version)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return a.AcsChatEventInThreadBase.unmarshalInternal(rawMsg)
}

// AcsChatThreadParticipant - Schema of the chat thread participant
type AcsChatThreadParticipant struct {
	// The name of the user
	DisplayName *string `json:"displayName,omitempty"`

	// The communication identifier of the user
	ParticipantCommunicationIdentifier *CommunicationIdentifierModel `json:"participantCommunicationIdentifier,omitempty"`
}

// AcsChatThreadPropertiesUpdatedEventData - Schema of the Data property of an EventGridEvent for a Microsoft.Communication.ChatThreadPropertiesUpdated
// event.
type AcsChatThreadPropertiesUpdatedEventData struct {
	AcsChatThreadEventInThreadBase
	// The time at which the properties of the thread were updated
	EditTime *time.Time `json:"editTime,omitempty"`

	// The communication identifier of the user who updated the thread properties
	EditedByCommunicationIdentifier *CommunicationIdentifierModel `json:"editedByCommunicationIdentifier,omitempty"`

	// The updated thread properties
	Properties map[string]interface{} `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AcsChatThreadPropertiesUpdatedEventData.
func (a AcsChatThreadPropertiesUpdatedEventData) MarshalJSON() ([]byte, error) {
	objectMap := a.AcsChatThreadEventInThreadBase.marshalInternal()
	populate(objectMap, "editTime", (*timeRFC3339)(a.EditTime))
	populate(objectMap, "editedByCommunicationIdentifier", a.EditedByCommunicationIdentifier)
	populate(objectMap, "properties", a.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AcsChatThreadPropertiesUpdatedEventData.
func (a *AcsChatThreadPropertiesUpdatedEventData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "editTime":
				var aux timeRFC3339
				err = unpopulate(val, &aux)
				a.EditTime = (*time.Time)(&aux)
				delete(rawMsg, key)
		case "editedByCommunicationIdentifier":
				err = unpopulate(val, &a.EditedByCommunicationIdentifier)
				delete(rawMsg, key)
		case "properties":
				err = unpopulate(val, &a.Properties)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return a.AcsChatThreadEventInThreadBase.unmarshalInternal(rawMsg)
}

// AcsChatThreadPropertiesUpdatedPerUserEventData - Schema of the Data property of an EventGridEvent for a Microsoft.Communication.ChatThreadPropertiesUpdatedPerUser
// event.
type AcsChatThreadPropertiesUpdatedPerUserEventData struct {
	AcsChatThreadEventBase
	// The time at which the properties of the thread were updated
	EditTime *time.Time `json:"editTime,omitempty"`

	// The communication identifier of the user who updated the thread properties
	EditedByCommunicationIdentifier *CommunicationIdentifierModel `json:"editedByCommunicationIdentifier,omitempty"`

	// The updated thread properties
	Properties map[string]interface{} `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AcsChatThreadPropertiesUpdatedPerUserEventData.
func (a AcsChatThreadPropertiesUpdatedPerUserEventData) MarshalJSON() ([]byte, error) {
	objectMap := a.AcsChatThreadEventBase.marshalInternal()
	populate(objectMap, "editTime", (*timeRFC3339)(a.EditTime))
	populate(objectMap, "editedByCommunicationIdentifier", a.EditedByCommunicationIdentifier)
	populate(objectMap, "properties", a.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AcsChatThreadPropertiesUpdatedPerUserEventData.
func (a *AcsChatThreadPropertiesUpdatedPerUserEventData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "editTime":
				var aux timeRFC3339
				err = unpopulate(val, &aux)
				a.EditTime = (*time.Time)(&aux)
				delete(rawMsg, key)
		case "editedByCommunicationIdentifier":
				err = unpopulate(val, &a.EditedByCommunicationIdentifier)
				delete(rawMsg, key)
		case "properties":
				err = unpopulate(val, &a.Properties)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return a.AcsChatThreadEventBase.unmarshalInternal(rawMsg)
}

// AcsChatThreadWithUserDeletedEventData - Schema of the Data property of an EventGridEvent for a Microsoft.Communication.ChatThreadWithUserDeleted event.
type AcsChatThreadWithUserDeletedEventData struct {
	AcsChatThreadEventBase
	// The deletion time of the thread
	DeleteTime *time.Time `json:"deleteTime,omitempty"`

	// The communication identifier of the user who deleted the thread
	DeletedByCommunicationIdentifier *CommunicationIdentifierModel `json:"deletedByCommunicationIdentifier,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AcsChatThreadWithUserDeletedEventData.
func (a AcsChatThreadWithUserDeletedEventData) MarshalJSON() ([]byte, error) {
	objectMap := a.AcsChatThreadEventBase.marshalInternal()
	populate(objectMap, "deleteTime", (*timeRFC3339)(a.DeleteTime))
	populate(objectMap, "deletedByCommunicationIdentifier", a.DeletedByCommunicationIdentifier)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AcsChatThreadWithUserDeletedEventData.
func (a *AcsChatThreadWithUserDeletedEventData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "deleteTime":
				var aux timeRFC3339
				err = unpopulate(val, &aux)
				a.DeleteTime = (*time.Time)(&aux)
				delete(rawMsg, key)
		case "deletedByCommunicationIdentifier":
				err = unpopulate(val, &a.DeletedByCommunicationIdentifier)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return a.AcsChatThreadEventBase.unmarshalInternal(rawMsg)
}

// AcsRecordingChunkInfo - Schema for all properties of Recording Chunk Information.
type AcsRecordingChunkInfo struct {
	// The documentId of the recording chunk
	DocumentID *string `json:"documentId,omitempty"`

	// The reason for ending the recording chunk
	EndReason *string `json:"endReason,omitempty"`

	// The index of the recording chunk
	Index *int64 `json:"index,omitempty"`
}

// AcsRecordingFileStatusUpdatedEventData - Schema of the Data property of an EventGridEvent for a Microsoft.Communication.RecordingFileStatusUpdated event.
type AcsRecordingFileStatusUpdatedEventData struct {
	// The recording duration in milliseconds
	RecordingDurationMs *int64 `json:"recordingDurationMs,omitempty"`

	// The time at which the recording started
	RecordingStartTime *time.Time `json:"recordingStartTime,omitempty"`

	// The details of recording storage information
	RecordingStorageInfo *AcsRecordingStorageInfo `json:"recordingStorageInfo,omitempty"`

	// The reason for ending recording session
	SessionEndReason *string `json:"sessionEndReason,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AcsRecordingFileStatusUpdatedEventData.
func (a AcsRecordingFileStatusUpdatedEventData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "recordingDurationMs", a.RecordingDurationMs)
	populate(objectMap, "recordingStartTime", (*timeRFC3339)(a.RecordingStartTime))
	populate(objectMap, "recordingStorageInfo", a.RecordingStorageInfo)
	populate(objectMap, "sessionEndReason", a.SessionEndReason)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AcsRecordingFileStatusUpdatedEventData.
func (a *AcsRecordingFileStatusUpdatedEventData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "recordingDurationMs":
				err = unpopulate(val, &a.RecordingDurationMs)
				delete(rawMsg, key)
		case "recordingStartTime":
				var aux timeRFC3339
				err = unpopulate(val, &aux)
				a.RecordingStartTime = (*time.Time)(&aux)
				delete(rawMsg, key)
		case "recordingStorageInfo":
				err = unpopulate(val, &a.RecordingStorageInfo)
				delete(rawMsg, key)
		case "sessionEndReason":
				err = unpopulate(val, &a.SessionEndReason)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// AcsRecordingStorageInfo - Schema for all properties of Recording Storage Information.
type AcsRecordingStorageInfo struct {
	// List of details of recording chunks information
	RecordingChunks []*AcsRecordingChunkInfo `json:"recordingChunks,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AcsRecordingStorageInfo.
func (a AcsRecordingStorageInfo) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "recordingChunks", a.RecordingChunks)
	return json.Marshal(objectMap)
}

// AcsSmsDeliveryAttempt - Schema for details of a delivery attempt
type AcsSmsDeliveryAttempt struct {
	// Number of segments whose delivery failed
	SegmentsFailed *int32 `json:"segmentsFailed,omitempty"`

	// Number of segments that were successfully delivered
	SegmentsSucceeded *int32 `json:"segmentsSucceeded,omitempty"`

	// TimeStamp when delivery was attempted
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AcsSmsDeliveryAttempt.
func (a AcsSmsDeliveryAttempt) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "segmentsFailed", a.SegmentsFailed)
	populate(objectMap, "segmentsSucceeded", a.SegmentsSucceeded)
	populate(objectMap, "timestamp", (*timeRFC3339)(a.Timestamp))
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AcsSmsDeliveryAttempt.
func (a *AcsSmsDeliveryAttempt) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "segmentsFailed":
				err = unpopulate(val, &a.SegmentsFailed)
				delete(rawMsg, key)
		case "segmentsSucceeded":
				err = unpopulate(val, &a.SegmentsSucceeded)
				delete(rawMsg, key)
		case "timestamp":
				var aux timeRFC3339
				err = unpopulate(val, &aux)
				a.Timestamp = (*time.Time)(&aux)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// AcsSmsDeliveryReportReceivedEventData - Schema of the Data property of an EventGridEvent for a Microsoft.Communication.SMSDeliveryReportReceived event.
type AcsSmsDeliveryReportReceivedEventData struct {
	AcsSmsEventBase
	// List of details of delivery attempts made
	DeliveryAttempts []*AcsSmsDeliveryAttempt `json:"deliveryAttempts,omitempty"`

	// Status of Delivery
	DeliveryStatus *string `json:"deliveryStatus,omitempty"`

	// Details about Delivery Status
	DeliveryStatusDetails *string `json:"deliveryStatusDetails,omitempty"`

	// The time at which the SMS delivery report was received
	ReceivedTimestamp *time.Time `json:"receivedTimestamp,omitempty"`

	// Customer Content
	Tag *string `json:"tag,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AcsSmsDeliveryReportReceivedEventData.
func (a AcsSmsDeliveryReportReceivedEventData) MarshalJSON() ([]byte, error) {
	objectMap := a.AcsSmsEventBase.marshalInternal()
	populate(objectMap, "deliveryAttempts", a.DeliveryAttempts)
	populate(objectMap, "deliveryStatus", a.DeliveryStatus)
	populate(objectMap, "deliveryStatusDetails", a.DeliveryStatusDetails)
	populate(objectMap, "receivedTimestamp", (*timeRFC3339)(a.ReceivedTimestamp))
	populate(objectMap, "tag", a.Tag)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AcsSmsDeliveryReportReceivedEventData.
func (a *AcsSmsDeliveryReportReceivedEventData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "deliveryAttempts":
				err = unpopulate(val, &a.DeliveryAttempts)
				delete(rawMsg, key)
		case "deliveryStatus":
				err = unpopulate(val, &a.DeliveryStatus)
				delete(rawMsg, key)
		case "deliveryStatusDetails":
				err = unpopulate(val, &a.DeliveryStatusDetails)
				delete(rawMsg, key)
		case "receivedTimestamp":
				var aux timeRFC3339
				err = unpopulate(val, &aux)
				a.ReceivedTimestamp = (*time.Time)(&aux)
				delete(rawMsg, key)
		case "tag":
				err = unpopulate(val, &a.Tag)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return a.AcsSmsEventBase.unmarshalInternal(rawMsg)
}

// AcsSmsEventBase - Schema of common properties of all SMS events
type AcsSmsEventBase struct {
	// The identity of SMS message sender
	From *string `json:"from,omitempty"`

	// The identity of the SMS message
	MessageID *string `json:"messageId,omitempty"`

	// The identity of SMS message receiver
	To *string `json:"to,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AcsSmsEventBase.
func (a AcsSmsEventBase) MarshalJSON() ([]byte, error) {
	objectMap := a.marshalInternal()
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AcsSmsEventBase.
func (a *AcsSmsEventBase) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return a.unmarshalInternal(rawMsg)
}

func (a AcsSmsEventBase) marshalInternal() map[string]interface{} {
	objectMap := make(map[string]interface{})
	populate(objectMap, "from", a.From)
	populate(objectMap, "messageId", a.MessageID)
	populate(objectMap, "to", a.To)
	return objectMap
}

func (a *AcsSmsEventBase) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "from":
				err = unpopulate(val, &a.From)
				delete(rawMsg, key)
		case "messageId":
				err = unpopulate(val, &a.MessageID)
				delete(rawMsg, key)
		case "to":
				err = unpopulate(val, &a.To)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// AcsSmsReceivedEventData - Schema of the Data property of an EventGridEvent for a Microsoft.Communication.SMSReceived event.
type AcsSmsReceivedEventData struct {
	AcsSmsEventBase
	// The SMS content
	Message *string `json:"message,omitempty"`

	// The time at which the SMS was received
	ReceivedTimestamp *time.Time `json:"receivedTimestamp,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AcsSmsReceivedEventData.
func (a AcsSmsReceivedEventData) MarshalJSON() ([]byte, error) {
	objectMap := a.AcsSmsEventBase.marshalInternal()
	populate(objectMap, "message", a.Message)
	populate(objectMap, "receivedTimestamp", (*timeRFC3339)(a.ReceivedTimestamp))
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AcsSmsReceivedEventData.
func (a *AcsSmsReceivedEventData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "message":
				err = unpopulate(val, &a.Message)
				delete(rawMsg, key)
		case "receivedTimestamp":
				var aux timeRFC3339
				err = unpopulate(val, &aux)
				a.ReceivedTimestamp = (*time.Time)(&aux)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return a.AcsSmsEventBase.unmarshalInternal(rawMsg)
}

// AppConfigurationKeyValueDeletedEventData - Schema of the Data property of an EventGridEvent for a Microsoft.AppConfiguration.KeyValueDeleted event.
type AppConfigurationKeyValueDeletedEventData struct {
	// The etag representing the key-value that was deleted.
	Etag *string `json:"etag,omitempty"`

	// The key used to identify the key-value that was deleted.
	Key *string `json:"key,omitempty"`

	// The label, if any, used to identify the key-value that was deleted.
	Label *string `json:"label,omitempty"`

	// The sync token representing the server state after the event.
	SyncToken *string `json:"syncToken,omitempty"`
}

// AppConfigurationKeyValueModifiedEventData - Schema of the Data property of an EventGridEvent for a Microsoft.AppConfiguration.KeyValueModified event.
type AppConfigurationKeyValueModifiedEventData struct {
	// The etag representing the new state of the key-value.
	Etag *string `json:"etag,omitempty"`

	// The key used to identify the key-value that was modified.
	Key *string `json:"key,omitempty"`

	// The label, if any, used to identify the key-value that was modified.
	Label *string `json:"label,omitempty"`

	// The sync token representing the server state after the event.
	SyncToken *string `json:"syncToken,omitempty"`
}

// AppEventTypeDetail - Detail of action on the app.
type AppEventTypeDetail struct {
	// Type of action of the operation.
	Action *AppAction `json:"action,omitempty"`
}

// AppServicePlanEventTypeDetail - Detail of action on the app service plan.
type AppServicePlanEventTypeDetail struct {
	// Type of action on the app service plan.
	Action *AppServicePlanAction `json:"action,omitempty"`

	// Kind of environment where app service plan is.
	StampKind *StampKind `json:"stampKind,omitempty"`

	// Asynchronous operation status of the operation on the app service plan.
	Status *AsyncStatus `json:"status,omitempty"`
}

// CloudEvent - Properties of an event published to an Event Grid topic using the CloudEvent 1.0 Schema
type CloudEvent struct {
	// REQUIRED; An identifier for the event. The combination of id and source must be unique for each distinct event.
	ID *string `json:"id,omitempty"`

	// REQUIRED; Identifies the context in which an event happened. The combination of id and source must be unique for each distinct event.
	Source *string `json:"source,omitempty"`

	// REQUIRED; The version of the CloudEvents specification which the event uses.
	Specversion *string `json:"specversion,omitempty"`

	// REQUIRED; Type of event related to the originating occurrence.
	Type *string `json:"type,omitempty"`

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]interface{}

	// Event data specific to the event type.
	Data interface{} `json:"data,omitempty"`

	// Event data specific to the event type, encoded as a base64 string.
	DataBase64 []byte `json:"data_base64,omitempty"`

	// Content type of data value.
	Datacontenttype *string `json:"datacontenttype,omitempty"`

	// Identifies the schema that data adheres to.
	Dataschema *string `json:"dataschema,omitempty"`

	// This describes the subject of the event in the context of the event producer (identified by source).
	Subject *string `json:"subject,omitempty"`

	// The time (in UTC) the event was generated, in RFC3339 format.
	Time *time.Time `json:"time,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type CloudEvent.
func (c CloudEvent) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "data", c.Data)
	populate(objectMap, "data_base64", c.DataBase64)
	populate(objectMap, "datacontenttype", c.Datacontenttype)
	populate(objectMap, "dataschema", c.Dataschema)
	populate(objectMap, "id", c.ID)
	populate(objectMap, "source", c.Source)
	populate(objectMap, "specversion", c.Specversion)
	populate(objectMap, "subject", c.Subject)
	populate(objectMap, "time", (*timeRFC3339)(c.Time))
	populate(objectMap, "type", c.Type)
	if c.AdditionalProperties != nil {
		for key, val := range c.AdditionalProperties {
			objectMap[key] = val
		}
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type CloudEvent.
func (c *CloudEvent) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "data":
				err = unpopulate(val, &c.Data)
				delete(rawMsg, key)
		case "data_base64":
				err = unpopulate(val, &c.DataBase64)
				delete(rawMsg, key)
		case "datacontenttype":
				err = unpopulate(val, &c.Datacontenttype)
				delete(rawMsg, key)
		case "dataschema":
				err = unpopulate(val, &c.Dataschema)
				delete(rawMsg, key)
		case "id":
				err = unpopulate(val, &c.ID)
				delete(rawMsg, key)
		case "source":
				err = unpopulate(val, &c.Source)
				delete(rawMsg, key)
		case "specversion":
				err = unpopulate(val, &c.Specversion)
				delete(rawMsg, key)
		case "subject":
				err = unpopulate(val, &c.Subject)
				delete(rawMsg, key)
		case "time":
				var aux timeRFC3339
				err = unpopulate(val, &aux)
				c.Time = (*time.Time)(&aux)
				delete(rawMsg, key)
		case "type":
				err = unpopulate(val, &c.Type)
				delete(rawMsg, key)
		default:
			if c.AdditionalProperties == nil {
				c.AdditionalProperties = map[string]interface{}{}
			}
			if val != nil {
				var aux interface{}
				err = json.Unmarshal(val, &aux)
				c.AdditionalProperties[key] = aux
			}
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// CommunicationIdentifierModel - Identifies a participant in Azure Communication services. A participant is, for example, a phone number or an Azure communication
// user. This model must be interpreted as a union: Apart from rawId, at
// most one further property may be set.
type CommunicationIdentifierModel struct {
	// The communication user.
	CommunicationUser *CommunicationUserIdentifierModel `json:"communicationUser,omitempty"`

	// The Microsoft Teams user.
	MicrosoftTeamsUser *MicrosoftTeamsUserIdentifierModel `json:"microsoftTeamsUser,omitempty"`

	// The phone number.
	PhoneNumber *PhoneNumberIdentifierModel `json:"phoneNumber,omitempty"`

	// Raw Id of the identifier. Optional in requests, required in responses.
	RawID *string `json:"rawId,omitempty"`
}

// CommunicationUserIdentifierModel - A user that got created with an Azure Communication Services resource.
type CommunicationUserIdentifierModel struct {
	// REQUIRED; The Id of the communication user.
	ID *string `json:"id,omitempty"`
}

// ContainerRegistryArtifactEventData - The content of the event request message.
type ContainerRegistryArtifactEventData struct {
	// The action that encompasses the provided event.
	Action *string `json:"action,omitempty"`

	// The event ID.
	ID *string `json:"id,omitempty"`

	// The target of the event.
	Target *ContainerRegistryArtifactEventTarget `json:"target,omitempty"`

	// The time at which the event occurred.
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ContainerRegistryArtifactEventData.
func (c ContainerRegistryArtifactEventData) MarshalJSON() ([]byte, error) {
	objectMap := c.marshalInternal()
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ContainerRegistryArtifactEventData.
func (c *ContainerRegistryArtifactEventData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return c.unmarshalInternal(rawMsg)
}

func (c ContainerRegistryArtifactEventData) marshalInternal() map[string]interface{} {
	objectMap := make(map[string]interface{})
	populate(objectMap, "action", c.Action)
	populate(objectMap, "id", c.ID)
	populate(objectMap, "target", c.Target)
	populate(objectMap, "timestamp", (*timeRFC3339)(c.Timestamp))
	return objectMap
}

func (c *ContainerRegistryArtifactEventData) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "action":
				err = unpopulate(val, &c.Action)
				delete(rawMsg, key)
		case "id":
				err = unpopulate(val, &c.ID)
				delete(rawMsg, key)
		case "target":
				err = unpopulate(val, &c.Target)
				delete(rawMsg, key)
		case "timestamp":
				var aux timeRFC3339
				err = unpopulate(val, &aux)
				c.Timestamp = (*time.Time)(&aux)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// ContainerRegistryArtifactEventTarget - The target of the event.
type ContainerRegistryArtifactEventTarget struct {
	// The digest of the artifact.
	Digest *string `json:"digest,omitempty"`

	// The MIME type of the artifact.
	MediaType *string `json:"mediaType,omitempty"`

	// The name of the artifact.
	Name *string `json:"name,omitempty"`

	// The repository name of the artifact.
	Repository *string `json:"repository,omitempty"`

	// The size in bytes of the artifact.
	Size *int64 `json:"size,omitempty"`

	// The tag of the artifact.
	Tag *string `json:"tag,omitempty"`

	// The version of the artifact.
	Version *string `json:"version,omitempty"`
}

// ContainerRegistryChartDeletedEventData - Schema of the Data property of an EventGridEvent for a Microsoft.ContainerRegistry.ChartDeleted event.
type ContainerRegistryChartDeletedEventData struct {
	ContainerRegistryArtifactEventData
}

// ContainerRegistryChartPushedEventData - Schema of the Data property of an EventGridEvent for a Microsoft.ContainerRegistry.ChartPushed event.
type ContainerRegistryChartPushedEventData struct {
	ContainerRegistryArtifactEventData
}

// ContainerRegistryEventActor - The agent that initiated the event. For most situations, this could be from the authorization context of the request.
type ContainerRegistryEventActor struct {
	// The subject or username associated with the request context that generated the event.
	Name *string `json:"name,omitempty"`
}

// ContainerRegistryEventData - The content of the event request message.
type ContainerRegistryEventData struct {
	// The action that encompasses the provided event.
	Action *string `json:"action,omitempty"`

	// The agent that initiated the event. For most situations, this could be from the authorization context of the request.
	Actor *ContainerRegistryEventActor `json:"actor,omitempty"`

	// The event ID.
	ID *string `json:"id,omitempty"`

	// The request that generated the event.
	Request *ContainerRegistryEventRequest `json:"request,omitempty"`

	// The registry node that generated the event. Put differently, while the actor initiates the event, the source generates it.
	Source *ContainerRegistryEventSource `json:"source,omitempty"`

	// The target of the event.
	Target *ContainerRegistryEventTarget `json:"target,omitempty"`

	// The time at which the event occurred.
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ContainerRegistryEventData.
func (c ContainerRegistryEventData) MarshalJSON() ([]byte, error) {
	objectMap := c.marshalInternal()
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ContainerRegistryEventData.
func (c *ContainerRegistryEventData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return c.unmarshalInternal(rawMsg)
}

func (c ContainerRegistryEventData) marshalInternal() map[string]interface{} {
	objectMap := make(map[string]interface{})
	populate(objectMap, "action", c.Action)
	populate(objectMap, "actor", c.Actor)
	populate(objectMap, "id", c.ID)
	populate(objectMap, "request", c.Request)
	populate(objectMap, "source", c.Source)
	populate(objectMap, "target", c.Target)
	populate(objectMap, "timestamp", (*timeRFC3339)(c.Timestamp))
	return objectMap
}

func (c *ContainerRegistryEventData) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "action":
				err = unpopulate(val, &c.Action)
				delete(rawMsg, key)
		case "actor":
				err = unpopulate(val, &c.Actor)
				delete(rawMsg, key)
		case "id":
				err = unpopulate(val, &c.ID)
				delete(rawMsg, key)
		case "request":
				err = unpopulate(val, &c.Request)
				delete(rawMsg, key)
		case "source":
				err = unpopulate(val, &c.Source)
				delete(rawMsg, key)
		case "target":
				err = unpopulate(val, &c.Target)
				delete(rawMsg, key)
		case "timestamp":
				var aux timeRFC3339
				err = unpopulate(val, &aux)
				c.Timestamp = (*time.Time)(&aux)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// ContainerRegistryEventRequest - The request that generated the event.
type ContainerRegistryEventRequest struct {
	// The IP or hostname and possibly port of the client connection that initiated the event. This is the RemoteAddr from the standard http request.
	Addr *string `json:"addr,omitempty"`

	// The externally accessible hostname of the registry instance, as specified by the http host header on incoming requests.
	Host *string `json:"host,omitempty"`

	// The ID of the request that initiated the event.
	ID *string `json:"id,omitempty"`

	// The request method that generated the event.
	Method *string `json:"method,omitempty"`

	// The user agent header of the request.
	Useragent *string `json:"useragent,omitempty"`
}

// ContainerRegistryEventSource - The registry node that generated the event. Put differently, while the actor initiates the event, the source generates
// it.
type ContainerRegistryEventSource struct {
	// The IP or hostname and the port of the registry node that generated the event. Generally, this will be resolved by os.Hostname() along with the running
// port.
	Addr *string `json:"addr,omitempty"`

	// The running instance of an application. Changes after each restart.
	InstanceID *string `json:"instanceID,omitempty"`
}

// ContainerRegistryEventTarget - The target of the event.
type ContainerRegistryEventTarget struct {
	// The digest of the content, as defined by the Registry V2 HTTP API Specification.
	Digest *string `json:"digest,omitempty"`

	// The number of bytes of the content. Same as Size field.
	Length *int64 `json:"length,omitempty"`

	// The MIME type of the referenced object.
	MediaType *string `json:"mediaType,omitempty"`

	// The repository name.
	Repository *string `json:"repository,omitempty"`

	// The number of bytes of the content. Same as Length field.
	Size *int64 `json:"size,omitempty"`

	// The tag name.
	Tag *string `json:"tag,omitempty"`

	// The direct URL to the content.
	URL *string `json:"url,omitempty"`
}

// ContainerRegistryImageDeletedEventData - Schema of the Data property of an EventGridEvent for a Microsoft.ContainerRegistry.ImageDeleted event.
type ContainerRegistryImageDeletedEventData struct {
	ContainerRegistryEventData
}

// ContainerRegistryImagePushedEventData - Schema of the Data property of an EventGridEvent for a Microsoft.ContainerRegistry.ImagePushed event.
type ContainerRegistryImagePushedEventData struct {
	ContainerRegistryEventData
}

// DeviceConnectionStateEvent - Schema of the Data property of an EventGridEvent for a device connection state event (DeviceConnected, DeviceDisconnected).
type DeviceConnectionStateEvent struct {
	// Information about the device connection state event.
	DeviceConnectionStateEventInfo *DeviceConnectionStateEventInfo `json:"deviceConnectionStateEventInfo,omitempty"`

	// The unique identifier of the device. This case-sensitive string can be up to 128 characters long, and supports ASCII 7-bit alphanumeric characters plus
// the following special characters: - : . + % _ #
// * ? ! ( ) , = @ ; $ '.
	DeviceID *string `json:"deviceId,omitempty"`

	// Name of the IoT Hub where the device was created or deleted.
	HubName *string `json:"hubName,omitempty"`

	// The unique identifier of the module. This case-sensitive string can be up to 128 characters long, and supports ASCII 7-bit alphanumeric characters plus
// the following special characters: - : . + % _ #
// * ? ! ( ) , = @ ; $ '.
	ModuleID *string `json:"moduleId,omitempty"`
}

// DeviceConnectionStateEventInfo - Information about the device connection state event.
type DeviceConnectionStateEventInfo struct {
	// Sequence number is string representation of a hexadecimal number. string compare can be used to identify the larger number because both in ASCII and
// HEX numbers come after alphabets. If you are
// converting the string to hex, then the number is a 256 bit number.
	SequenceNumber *string `json:"sequenceNumber,omitempty"`
}

// DeviceLifeCycleEvent - Schema of the Data property of an EventGridEvent for a device life cycle event (DeviceCreated, DeviceDeleted).
type DeviceLifeCycleEvent struct {
	// The unique identifier of the device. This case-sensitive string can be up to 128 characters long, and supports ASCII 7-bit alphanumeric characters plus
// the following special characters: - : . + % _ #
// * ? ! ( ) , = @ ; $ '.
	DeviceID *string `json:"deviceId,omitempty"`

	// Name of the IoT Hub where the device was created or deleted.
	HubName *string `json:"hubName,omitempty"`

	// Information about the device twin, which is the cloud representation of application device metadata.
	Twin *DeviceTwinInfo `json:"twin,omitempty"`
}

// DeviceTelemetryEvent - Schema of the Data property of an EventGridEvent for a device telemetry event (DeviceTelemetry).
type DeviceTelemetryEvent struct {
	// The content of the message from the device.
	Body interface{} `json:"body,omitempty"`

	// Application properties are user-defined strings that can be added to the message. These fields are optional.
	Properties map[string]*string `json:"properties,omitempty"`

	// System properties help identify contents and source of the messages.
	SystemProperties map[string]*string `json:"systemProperties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DeviceTelemetryEvent.
func (d DeviceTelemetryEvent) MarshalJSON() ([]byte, error) {
	objectMap := d.marshalInternal()
	return json.Marshal(objectMap)
}

func (d DeviceTelemetryEvent) marshalInternal() map[string]interface{} {
	objectMap := make(map[string]interface{})
	populate(objectMap, "body", d.Body)
	populate(objectMap, "properties", d.Properties)
	populate(objectMap, "systemProperties", d.SystemProperties)
	return objectMap
}

// DeviceTwin - A portion of the properties that can be written only by the application back-end, and read by the device.
type DeviceTwin struct {
	// Metadata information for the properties JSON document.
	Metadata *DeviceTwinMetadata `json:"metadata,omitempty"`

	// Version of device twin properties.
	Version *float32 `json:"version,omitempty"`
}

// DeviceTwinInfo - Information about the device twin, which is the cloud representation of application device metadata.
type DeviceTwinInfo struct {
	// Authentication type used for this device: either SAS, SelfSigned, or CertificateAuthority.
	AuthenticationType *string `json:"authenticationType,omitempty"`

	// Count of cloud to device messages sent to this device.
	CloudToDeviceMessageCount *float32 `json:"cloudToDeviceMessageCount,omitempty"`

	// Whether the device is connected or disconnected.
	ConnectionState *string `json:"connectionState,omitempty"`

	// The unique identifier of the device twin.
	DeviceID *string `json:"deviceId,omitempty"`

	// A piece of information that describes the content of the device twin. Each etag is guaranteed to be unique per device twin.
	Etag *string `json:"etag,omitempty"`

	// The ISO8601 timestamp of the last activity.
	LastActivityTime *string `json:"lastActivityTime,omitempty"`

	// Properties JSON element.
	Properties *DeviceTwinInfoProperties `json:"properties,omitempty"`

	// Whether the device twin is enabled or disabled.
	Status *string `json:"status,omitempty"`

	// The ISO8601 timestamp of the last device twin status update.
	StatusUpdateTime *string `json:"statusUpdateTime,omitempty"`

	// An integer that is incremented by one each time the device twin is updated.
	Version *float32 `json:"version,omitempty"`

	// The thumbprint is a unique value for the x509 certificate, commonly used to find a particular certificate in a certificate store. The thumbprint is dynamically
// generated using the SHA1 algorithm, and
// does not physically exist in the certificate.
	X509Thumbprint *DeviceTwinInfoX509Thumbprint `json:"x509Thumbprint,omitempty"`
}

// DeviceTwinInfoProperties - Properties JSON element.
type DeviceTwinInfoProperties struct {
	// A portion of the properties that can be written only by the application back-end, and read by the device.
	Desired *DeviceTwin `json:"desired,omitempty"`

	// A portion of the properties that can be written only by the device, and read by the application back-end.
	Reported *DeviceTwin `json:"reported,omitempty"`
}

// DeviceTwinInfoX509Thumbprint - The thumbprint is a unique value for the x509 certificate, commonly used to find a particular certificate in a certificate
// store. The thumbprint is dynamically generated using the SHA1 algorithm, and
// does not physically exist in the certificate.
type DeviceTwinInfoX509Thumbprint struct {
	// Primary thumbprint for the x509 certificate.
	PrimaryThumbprint *string `json:"primaryThumbprint,omitempty"`

	// Secondary thumbprint for the x509 certificate.
	SecondaryThumbprint *string `json:"secondaryThumbprint,omitempty"`
}

// DeviceTwinMetadata - Metadata information for the properties JSON document.
type DeviceTwinMetadata struct {
	// The ISO8601 timestamp of the last time the properties were updated.
	LastUpdated *string `json:"lastUpdated,omitempty"`
}

// EventGridClientPublishCloudEventEventsOptions contains the optional parameters for the EventGridClient.PublishCloudEventEvents method.
type EventGridClientPublishCloudEventEventsOptions struct {
	// placeholder for future optional parameters
}

// EventGridClientPublishCustomEventEventsOptions contains the optional parameters for the EventGridClient.PublishCustomEventEvents method.
type EventGridClientPublishCustomEventEventsOptions struct {
	// placeholder for future optional parameters
}

// EventGridClientPublishEventsOptions contains the optional parameters for the EventGridClient.PublishEvents method.
type EventGridClientPublishEventsOptions struct {
	// placeholder for future optional parameters
}

// EventGridEvent - Properties of an event published to an Event Grid topic using the EventGrid Schema.
type EventGridEvent struct {
	// REQUIRED; Event data specific to the event type.
	Data interface{} `json:"data,omitempty"`

	// REQUIRED; The schema version of the data object.
	DataVersion *string `json:"dataVersion,omitempty"`

	// REQUIRED; The time (in UTC) the event was generated.
	EventTime *time.Time `json:"eventTime,omitempty"`

	// REQUIRED; The type of the event that occurred.
	EventType *string `json:"eventType,omitempty"`

	// REQUIRED; An unique identifier for the event.
	ID *string `json:"id,omitempty"`

	// REQUIRED; A resource path relative to the topic path.
	Subject *string `json:"subject,omitempty"`

	// The resource path of the event source.
	Topic *string `json:"topic,omitempty"`

	// READ-ONLY; The schema version of the event metadata.
	MetadataVersion *string `json:"metadataVersion,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type EventGridEvent.
func (e EventGridEvent) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "data", e.Data)
	populate(objectMap, "dataVersion", e.DataVersion)
	populate(objectMap, "eventTime", (*timeRFC3339)(e.EventTime))
	populate(objectMap, "eventType", e.EventType)
	populate(objectMap, "id", e.ID)
	populate(objectMap, "metadataVersion", e.MetadataVersion)
	populate(objectMap, "subject", e.Subject)
	populate(objectMap, "topic", e.Topic)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type EventGridEvent.
func (e *EventGridEvent) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "data":
				err = unpopulate(val, &e.Data)
				delete(rawMsg, key)
		case "dataVersion":
				err = unpopulate(val, &e.DataVersion)
				delete(rawMsg, key)
		case "eventTime":
				var aux timeRFC3339
				err = unpopulate(val, &aux)
				e.EventTime = (*time.Time)(&aux)
				delete(rawMsg, key)
		case "eventType":
				err = unpopulate(val, &e.EventType)
				delete(rawMsg, key)
		case "id":
				err = unpopulate(val, &e.ID)
				delete(rawMsg, key)
		case "metadataVersion":
				err = unpopulate(val, &e.MetadataVersion)
				delete(rawMsg, key)
		case "subject":
				err = unpopulate(val, &e.Subject)
				delete(rawMsg, key)
		case "topic":
				err = unpopulate(val, &e.Topic)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// EventHubCaptureFileCreatedEventData - Schema of the Data property of an EventGridEvent for a Microsoft.EventHub.CaptureFileCreated event.
type EventHubCaptureFileCreatedEventData struct {
	// The number of events in the file.
	EventCount *int32 `json:"eventCount,omitempty"`

	// The file type of the capture file.
	FileType *string `json:"fileType,omitempty"`

	// The path to the capture file.
	Fileurl *string `json:"fileurl,omitempty"`

	// The first time from the queue.
	FirstEnqueueTime *time.Time `json:"firstEnqueueTime,omitempty"`

	// The smallest sequence number from the queue.
	FirstSequenceNumber *int32 `json:"firstSequenceNumber,omitempty"`

	// The last time from the queue.
	LastEnqueueTime *time.Time `json:"lastEnqueueTime,omitempty"`

	// The last sequence number from the queue.
	LastSequenceNumber *int32 `json:"lastSequenceNumber,omitempty"`

	// The shard ID.
	PartitionID *string `json:"partitionId,omitempty"`

	// The file size.
	SizeInBytes *int32 `json:"sizeInBytes,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type EventHubCaptureFileCreatedEventData.
func (e EventHubCaptureFileCreatedEventData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "eventCount", e.EventCount)
	populate(objectMap, "fileType", e.FileType)
	populate(objectMap, "fileurl", e.Fileurl)
	populate(objectMap, "firstEnqueueTime", (*timeRFC3339)(e.FirstEnqueueTime))
	populate(objectMap, "firstSequenceNumber", e.FirstSequenceNumber)
	populate(objectMap, "lastEnqueueTime", (*timeRFC3339)(e.LastEnqueueTime))
	populate(objectMap, "lastSequenceNumber", e.LastSequenceNumber)
	populate(objectMap, "partitionId", e.PartitionID)
	populate(objectMap, "sizeInBytes", e.SizeInBytes)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type EventHubCaptureFileCreatedEventData.
func (e *EventHubCaptureFileCreatedEventData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "eventCount":
				err = unpopulate(val, &e.EventCount)
				delete(rawMsg, key)
		case "fileType":
				err = unpopulate(val, &e.FileType)
				delete(rawMsg, key)
		case "fileurl":
				err = unpopulate(val, &e.Fileurl)
				delete(rawMsg, key)
		case "firstEnqueueTime":
				var aux timeRFC3339
				err = unpopulate(val, &aux)
				e.FirstEnqueueTime = (*time.Time)(&aux)
				delete(rawMsg, key)
		case "firstSequenceNumber":
				err = unpopulate(val, &e.FirstSequenceNumber)
				delete(rawMsg, key)
		case "lastEnqueueTime":
				var aux timeRFC3339
				err = unpopulate(val, &aux)
				e.LastEnqueueTime = (*time.Time)(&aux)
				delete(rawMsg, key)
		case "lastSequenceNumber":
				err = unpopulate(val, &e.LastSequenceNumber)
				delete(rawMsg, key)
		case "partitionId":
				err = unpopulate(val, &e.PartitionID)
				delete(rawMsg, key)
		case "sizeInBytes":
				err = unpopulate(val, &e.SizeInBytes)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// IotHubDeviceConnectedEventData - Event data for Microsoft.Devices.DeviceConnected event.
type IotHubDeviceConnectedEventData struct {
	DeviceConnectionStateEvent
}

// IotHubDeviceCreatedEventData - Event data for Microsoft.Devices.DeviceCreated event.
type IotHubDeviceCreatedEventData struct {
	DeviceLifeCycleEvent
}

// IotHubDeviceDeletedEventData - Event data for Microsoft.Devices.DeviceDeleted event.
type IotHubDeviceDeletedEventData struct {
	DeviceLifeCycleEvent
}

// IotHubDeviceDisconnectedEventData - Event data for Microsoft.Devices.DeviceDisconnected event.
type IotHubDeviceDisconnectedEventData struct {
	DeviceConnectionStateEvent
}

// IotHubDeviceTelemetryEventData - Event data for Microsoft.Devices.DeviceTelemetry event.
type IotHubDeviceTelemetryEventData struct {
	DeviceTelemetryEvent
}

// KeyVaultAccessPolicyChangedEventData - Schema of the Data property of an EventGridEvent for a Microsoft.KeyVault.VaultAccessPolicyChanged event.
type KeyVaultAccessPolicyChangedEventData struct {
	// The expiration date of the object that triggered this event
	Exp *float32 `json:"exp,omitempty"`

	// The id of the object that triggered this event.
	ID *string `json:"id,omitempty"`

	// Not before date of the object that triggered this event
	Nbf *float32 `json:"nbf,omitempty"`

	// The name of the object that triggered this event
	ObjectName *string `json:"objectName,omitempty"`

	// The type of the object that triggered this event
	ObjectType *string `json:"objectType,omitempty"`

	// Key vault name of the object that triggered this event.
	VaultName *string `json:"vaultName,omitempty"`

	// The version of the object that triggered this event
	Version *string `json:"version,omitempty"`
}

// KeyVaultCertificateExpiredEventData - Schema of the Data property of an EventGridEvent for a Microsoft.KeyVault.CertificateExpired event.
type KeyVaultCertificateExpiredEventData struct {
	// The expiration date of the object that triggered this event
	Exp *float32 `json:"exp,omitempty"`

	// The id of the object that triggered this event.
	ID *string `json:"id,omitempty"`

	// Not before date of the object that triggered this event
	Nbf *float32 `json:"nbf,omitempty"`

	// The name of the object that triggered this event
	ObjectName *string `json:"objectName,omitempty"`

	// The type of the object that triggered this event
	ObjectType *string `json:"objectType,omitempty"`

	// Key vault name of the object that triggered this event.
	VaultName *string `json:"vaultName,omitempty"`

	// The version of the object that triggered this event
	Version *string `json:"version,omitempty"`
}

// KeyVaultCertificateNearExpiryEventData - Schema of the Data property of an EventGridEvent for a Microsoft.KeyVault.CertificateNearExpiry event.
type KeyVaultCertificateNearExpiryEventData struct {
	// The expiration date of the object that triggered this event
	Exp *float32 `json:"exp,omitempty"`

	// The id of the object that triggered this event.
	ID *string `json:"id,omitempty"`

	// Not before date of the object that triggered this event
	Nbf *float32 `json:"nbf,omitempty"`

	// The name of the object that triggered this event
	ObjectName *string `json:"objectName,omitempty"`

	// The type of the object that triggered this event
	ObjectType *string `json:"objectType,omitempty"`

	// Key vault name of the object that triggered this event.
	VaultName *string `json:"vaultName,omitempty"`

	// The version of the object that triggered this event
	Version *string `json:"version,omitempty"`
}

// KeyVaultCertificateNewVersionCreatedEventData - Schema of the Data property of an EventGridEvent for a Microsoft.KeyVault.CertificateNewVersionCreated
// event.
type KeyVaultCertificateNewVersionCreatedEventData struct {
	// The expiration date of the object that triggered this event
	Exp *float32 `json:"exp,omitempty"`

	// The id of the object that triggered this event.
	ID *string `json:"id,omitempty"`

	// Not before date of the object that triggered this event
	Nbf *float32 `json:"nbf,omitempty"`

	// The name of the object that triggered this event
	ObjectName *string `json:"objectName,omitempty"`

	// The type of the object that triggered this event
	ObjectType *string `json:"objectType,omitempty"`

	// Key vault name of the object that triggered this event.
	VaultName *string `json:"vaultName,omitempty"`

	// The version of the object that triggered this event
	Version *string `json:"version,omitempty"`
}

// KeyVaultKeyExpiredEventData - Schema of the Data property of an EventGridEvent for a Microsoft.KeyVault.KeyExpired event.
type KeyVaultKeyExpiredEventData struct {
	// The expiration date of the object that triggered this event
	Exp *float32 `json:"exp,omitempty"`

	// The id of the object that triggered this event.
	ID *string `json:"id,omitempty"`

	// Not before date of the object that triggered this event
	Nbf *float32 `json:"nbf,omitempty"`

	// The name of the object that triggered this event
	ObjectName *string `json:"objectName,omitempty"`

	// The type of the object that triggered this event
	ObjectType *string `json:"objectType,omitempty"`

	// Key vault name of the object that triggered this event.
	VaultName *string `json:"vaultName,omitempty"`

	// The version of the object that triggered this event
	Version *string `json:"version,omitempty"`
}

// KeyVaultKeyNearExpiryEventData - Schema of the Data property of an EventGridEvent for a Microsoft.KeyVault.KeyNearExpiry event.
type KeyVaultKeyNearExpiryEventData struct {
	// The expiration date of the object that triggered this event
	Exp *float32 `json:"exp,omitempty"`

	// The id of the object that triggered this event.
	ID *string `json:"id,omitempty"`

	// Not before date of the object that triggered this event
	Nbf *float32 `json:"nbf,omitempty"`

	// The name of the object that triggered this event
	ObjectName *string `json:"objectName,omitempty"`

	// The type of the object that triggered this event
	ObjectType *string `json:"objectType,omitempty"`

	// Key vault name of the object that triggered this event.
	VaultName *string `json:"vaultName,omitempty"`

	// The version of the object that triggered this event
	Version *string `json:"version,omitempty"`
}

// KeyVaultKeyNewVersionCreatedEventData - Schema of the Data property of an EventGridEvent for a Microsoft.KeyVault.KeyNewVersionCreated event.
type KeyVaultKeyNewVersionCreatedEventData struct {
	// The expiration date of the object that triggered this event
	Exp *float32 `json:"exp,omitempty"`

	// The id of the object that triggered this event.
	ID *string `json:"id,omitempty"`

	// Not before date of the object that triggered this event
	Nbf *float32 `json:"nbf,omitempty"`

	// The name of the object that triggered this event
	ObjectName *string `json:"objectName,omitempty"`

	// The type of the object that triggered this event
	ObjectType *string `json:"objectType,omitempty"`

	// Key vault name of the object that triggered this event.
	VaultName *string `json:"vaultName,omitempty"`

	// The version of the object that triggered this event
	Version *string `json:"version,omitempty"`
}

// KeyVaultSecretExpiredEventData - Schema of the Data property of an EventGridEvent for a Microsoft.KeyVault.SecretExpired event.
type KeyVaultSecretExpiredEventData struct {
	// The expiration date of the object that triggered this event
	Exp *float32 `json:"exp,omitempty"`

	// The id of the object that triggered this event.
	ID *string `json:"id,omitempty"`

	// Not before date of the object that triggered this event
	Nbf *float32 `json:"nbf,omitempty"`

	// The name of the object that triggered this event
	ObjectName *string `json:"objectName,omitempty"`

	// The type of the object that triggered this event
	ObjectType *string `json:"objectType,omitempty"`

	// Key vault name of the object that triggered this event.
	VaultName *string `json:"vaultName,omitempty"`

	// The version of the object that triggered this event
	Version *string `json:"version,omitempty"`
}

// KeyVaultSecretNearExpiryEventData - Schema of the Data property of an EventGridEvent for a Microsoft.KeyVault.SecretNearExpiry event.
type KeyVaultSecretNearExpiryEventData struct {
	// The expiration date of the object that triggered this event
	Exp *float32 `json:"exp,omitempty"`

	// The id of the object that triggered this event.
	ID *string `json:"id,omitempty"`

	// Not before date of the object that triggered this event
	Nbf *float32 `json:"nbf,omitempty"`

	// The name of the object that triggered this event
	ObjectName *string `json:"objectName,omitempty"`

	// The type of the object that triggered this event
	ObjectType *string `json:"objectType,omitempty"`

	// Key vault name of the object that triggered this event.
	VaultName *string `json:"vaultName,omitempty"`

	// The version of the object that triggered this event
	Version *string `json:"version,omitempty"`
}

// KeyVaultSecretNewVersionCreatedEventData - Schema of the Data property of an EventGridEvent for a Microsoft.KeyVault.SecretNewVersionCreated event.
type KeyVaultSecretNewVersionCreatedEventData struct {
	// The expiration date of the object that triggered this event
	Exp *float32 `json:"exp,omitempty"`

	// The id of the object that triggered this event.
	ID *string `json:"id,omitempty"`

	// Not before date of the object that triggered this event
	Nbf *float32 `json:"nbf,omitempty"`

	// The name of the object that triggered this event
	ObjectName *string `json:"objectName,omitempty"`

	// The type of the object that triggered this event
	ObjectType *string `json:"objectType,omitempty"`

	// Key vault name of the object that triggered this event.
	VaultName *string `json:"vaultName,omitempty"`

	// The version of the object that triggered this event
	Version *string `json:"version,omitempty"`
}

// MachineLearningServicesDatasetDriftDetectedEventData - Schema of the Data property of an EventGridEvent for a Microsoft.MachineLearningServices.DatasetDriftDetected
// event.
type MachineLearningServicesDatasetDriftDetectedEventData struct {
	// The ID of the base Dataset used to detect drift.
	BaseDatasetID *string `json:"baseDatasetId,omitempty"`

	// The ID of the data drift monitor that triggered the event.
	DataDriftID *string `json:"dataDriftId,omitempty"`

	// The name of the data drift monitor that triggered the event.
	DataDriftName *string `json:"dataDriftName,omitempty"`

	// The coefficient result that triggered the event.
	DriftCoefficient *float64 `json:"driftCoefficient,omitempty"`

	// The end time of the target dataset time series that resulted in drift detection.
	EndTime *time.Time `json:"endTime,omitempty"`

	// The ID of the Run that detected data drift.
	RunID *string `json:"runId,omitempty"`

	// The start time of the target dataset time series that resulted in drift detection.
	StartTime *time.Time `json:"startTime,omitempty"`

	// The ID of the target Dataset used to detect drift.
	TargetDatasetID *string `json:"targetDatasetId,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type MachineLearningServicesDatasetDriftDetectedEventData.
func (m MachineLearningServicesDatasetDriftDetectedEventData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "baseDatasetId", m.BaseDatasetID)
	populate(objectMap, "dataDriftId", m.DataDriftID)
	populate(objectMap, "dataDriftName", m.DataDriftName)
	populate(objectMap, "driftCoefficient", m.DriftCoefficient)
	populate(objectMap, "endTime", (*timeRFC3339)(m.EndTime))
	populate(objectMap, "runId", m.RunID)
	populate(objectMap, "startTime", (*timeRFC3339)(m.StartTime))
	populate(objectMap, "targetDatasetId", m.TargetDatasetID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MachineLearningServicesDatasetDriftDetectedEventData.
func (m *MachineLearningServicesDatasetDriftDetectedEventData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "baseDatasetId":
				err = unpopulate(val, &m.BaseDatasetID)
				delete(rawMsg, key)
		case "dataDriftId":
				err = unpopulate(val, &m.DataDriftID)
				delete(rawMsg, key)
		case "dataDriftName":
				err = unpopulate(val, &m.DataDriftName)
				delete(rawMsg, key)
		case "driftCoefficient":
				err = unpopulate(val, &m.DriftCoefficient)
				delete(rawMsg, key)
		case "endTime":
				var aux timeRFC3339
				err = unpopulate(val, &aux)
				m.EndTime = (*time.Time)(&aux)
				delete(rawMsg, key)
		case "runId":
				err = unpopulate(val, &m.RunID)
				delete(rawMsg, key)
		case "startTime":
				var aux timeRFC3339
				err = unpopulate(val, &aux)
				m.StartTime = (*time.Time)(&aux)
				delete(rawMsg, key)
		case "targetDatasetId":
				err = unpopulate(val, &m.TargetDatasetID)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MachineLearningServicesModelDeployedEventData - Schema of the Data property of an EventGridEvent for a Microsoft.MachineLearningServices.ModelDeployed
// event.
type MachineLearningServicesModelDeployedEventData struct {
	// A common separated list of model IDs. The IDs of the models deployed in the service.
	ModelIDs *string `json:"modelIds,omitempty"`

	// The compute type (e.g. ACI, AKS) of the deployed service.
	ServiceComputeType *string `json:"serviceComputeType,omitempty"`

	// The name of the deployed service.
	ServiceName *string `json:"serviceName,omitempty"`

	// The properties of the deployed service.
	ServiceProperties interface{} `json:"serviceProperties,omitempty"`

	// The tags of the deployed service.
	ServiceTags interface{} `json:"serviceTags,omitempty"`
}

// MachineLearningServicesModelRegisteredEventData - Schema of the Data property of an EventGridEvent for a Microsoft.MachineLearningServices.ModelRegistered
// event.
type MachineLearningServicesModelRegisteredEventData struct {
	// The name of the model that was registered.
	ModelName *string `json:"modelName,omitempty"`

	// The properties of the model that was registered.
	ModelProperties interface{} `json:"modelProperties,omitempty"`

	// The tags of the model that was registered.
	ModelTags interface{} `json:"modelTags,omitempty"`

	// The version of the model that was registered.
	ModelVersion *string `json:"modelVersion,omitempty"`
}

// MachineLearningServicesRunCompletedEventData - Schema of the Data property of an EventGridEvent for a Microsoft.MachineLearningServices.RunCompleted
// event.
type MachineLearningServicesRunCompletedEventData struct {
	// The ID of the experiment that the run belongs to.
	ExperimentID *string `json:"experimentId,omitempty"`

	// The name of the experiment that the run belongs to.
	ExperimentName *string `json:"experimentName,omitempty"`

	// The ID of the Run that was completed.
	RunID *string `json:"runId,omitempty"`

	// The properties of the completed Run.
	RunProperties interface{} `json:"runProperties,omitempty"`

	// The tags of the completed Run.
	RunTags interface{} `json:"runTags,omitempty"`

	// The Run Type of the completed Run.
	RunType *string `json:"runType,omitempty"`
}

// MachineLearningServicesRunStatusChangedEventData - Schema of the Data property of an EventGridEvent for a Microsoft.MachineLearningServices.RunStatusChanged
// event.
type MachineLearningServicesRunStatusChangedEventData struct {
	// The ID of the experiment that the Machine Learning Run belongs to.
	ExperimentID *string `json:"experimentId,omitempty"`

	// The name of the experiment that the Machine Learning Run belongs to.
	ExperimentName *string `json:"experimentName,omitempty"`

	// The ID of the Machine Learning Run.
	RunID *string `json:"runId,omitempty"`

	// The properties of the Machine Learning Run.
	RunProperties interface{} `json:"runProperties,omitempty"`

	// The status of the Machine Learning Run.
	RunStatus *string `json:"runStatus,omitempty"`

	// The tags of the Machine Learning Run.
	RunTags interface{} `json:"runTags,omitempty"`

	// The Run Type of the Machine Learning Run.
	RunType *string `json:"runType,omitempty"`
}

// MapsGeofenceEnteredEventData - Schema of the Data property of an EventGridEvent for a Microsoft.Maps.GeofenceEntered event.
type MapsGeofenceEnteredEventData struct {
	MapsGeofenceEvent
}

// MapsGeofenceEvent - Schema of the Data property of an EventGridEvent for a Geofence event (GeofenceEntered, GeofenceExited, GeofenceResult).
type MapsGeofenceEvent struct {
	// Lists of the geometry ID of the geofence which is expired relative to the user time in the request.
	ExpiredGeofenceGeometryID []*string `json:"expiredGeofenceGeometryId,omitempty"`

	// Lists the fence geometries that either fully contain the coordinate position or have an overlap with the searchBuffer around the fence.
	Geometries []*MapsGeofenceGeometry `json:"geometries,omitempty"`

	// Lists of the geometry ID of the geofence which is in invalid period relative to the user time in the request.
	InvalidPeriodGeofenceGeometryID []*string `json:"invalidPeriodGeofenceGeometryId,omitempty"`

	// True if at least one event is published to the Azure Maps event subscriber, false if no event is published to the Azure Maps event subscriber.
	IsEventPublished *bool `json:"isEventPublished,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type MapsGeofenceEvent.
func (m MapsGeofenceEvent) MarshalJSON() ([]byte, error) {
	objectMap := m.marshalInternal()
	return json.Marshal(objectMap)
}

func (m MapsGeofenceEvent) marshalInternal() map[string]interface{} {
	objectMap := make(map[string]interface{})
	populate(objectMap, "expiredGeofenceGeometryId", m.ExpiredGeofenceGeometryID)
	populate(objectMap, "geometries", m.Geometries)
	populate(objectMap, "invalidPeriodGeofenceGeometryId", m.InvalidPeriodGeofenceGeometryID)
	populate(objectMap, "isEventPublished", m.IsEventPublished)
	return objectMap
}

// MapsGeofenceExitedEventData - Schema of the Data property of an EventGridEvent for a Microsoft.Maps.GeofenceExited event.
type MapsGeofenceExitedEventData struct {
	MapsGeofenceEvent
}

// MapsGeofenceGeometry - The geofence geometry.
type MapsGeofenceGeometry struct {
	// ID of the device.
	DeviceID *string `json:"deviceId,omitempty"`

	// Distance from the coordinate to the closest border of the geofence. Positive means the coordinate is outside of the geofence. If the coordinate is outside
// of the geofence, but more than the value of
// searchBuffer away from the closest geofence border, then the value is 999. Negative means the coordinate is inside of the geofence. If the coordinate
// is inside the polygon, but more than the value of
// searchBuffer away from the closest geofencing border,then the value is -999. A value of 999 means that there is great confidence the coordinate is well
// outside the geofence. A value of -999 means that
// there is great confidence the coordinate is well within the geofence.
	Distance *float32 `json:"distance,omitempty"`

	// The unique ID for the geofence geometry.
	GeometryID *string `json:"geometryId,omitempty"`

	// Latitude of the nearest point of the geometry.
	NearestLat *float32 `json:"nearestLat,omitempty"`

	// Longitude of the nearest point of the geometry.
	NearestLon *float32 `json:"nearestLon,omitempty"`

	// The unique id returned from user upload service when uploading a geofence. Will not be included in geofencing post API.
	UdID *string `json:"udId,omitempty"`
}

// MapsGeofenceResultEventData - Schema of the Data property of an EventGridEvent for a Microsoft.Maps.GeofenceResult event.
type MapsGeofenceResultEventData struct {
	MapsGeofenceEvent
}

// MediaJobCanceledEventData - Job canceled event data. Schema of the data property of an EventGridEvent for a Microsoft.Media.JobCanceled event.
type MediaJobCanceledEventData struct {
	MediaJobStateChangeEventData
	// Gets the Job outputs.
	Outputs []MediaJobOutputClassification `json:"outputs,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type MediaJobCanceledEventData.
func (m MediaJobCanceledEventData) MarshalJSON() ([]byte, error) {
	objectMap := m.MediaJobStateChangeEventData.marshalInternal()
	populate(objectMap, "outputs", m.Outputs)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MediaJobCanceledEventData.
func (m *MediaJobCanceledEventData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "outputs":
				m.Outputs, err = unmarshalMediaJobOutputClassificationArray(val)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return m.MediaJobStateChangeEventData.unmarshalInternal(rawMsg)
}

// MediaJobCancelingEventData - Job canceling event data. Schema of the data property of an EventGridEvent for a Microsoft.Media.JobCanceling event.
type MediaJobCancelingEventData struct {
	MediaJobStateChangeEventData
}

// MediaJobError - Details of JobOutput errors.
type MediaJobError struct {
	// READ-ONLY; Helps with categorization of errors.
	Category *MediaJobErrorCategory `json:"category,omitempty" azure:"ro"`

	// READ-ONLY; Error code describing the error.
	Code *MediaJobErrorCode `json:"code,omitempty" azure:"ro"`

	// READ-ONLY; An array of details about specific errors that led to this reported error.
	Details []*MediaJobErrorDetail `json:"details,omitempty" azure:"ro"`

	// READ-ONLY; A human-readable language-dependent representation of the error.
	Message *string `json:"message,omitempty" azure:"ro"`

	// READ-ONLY; Indicates that it may be possible to retry the Job. If retry is unsuccessful, please contact Azure support via Azure Portal.
	Retry *MediaJobRetry `json:"retry,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type MediaJobError.
func (m MediaJobError) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "category", m.Category)
	populate(objectMap, "code", m.Code)
	populate(objectMap, "details", m.Details)
	populate(objectMap, "message", m.Message)
	populate(objectMap, "retry", m.Retry)
	return json.Marshal(objectMap)
}

// MediaJobErrorDetail - Details of JobOutput errors.
type MediaJobErrorDetail struct {
	// READ-ONLY; Code describing the error detail.
	Code *string `json:"code,omitempty" azure:"ro"`

	// READ-ONLY; A human-readable representation of the error.
	Message *string `json:"message,omitempty" azure:"ro"`
}

// MediaJobErroredEventData - Job error state event data. Schema of the data property of an EventGridEvent for a Microsoft.Media.JobErrored event.
type MediaJobErroredEventData struct {
	MediaJobStateChangeEventData
	// Gets the Job outputs.
	Outputs []MediaJobOutputClassification `json:"outputs,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type MediaJobErroredEventData.
func (m MediaJobErroredEventData) MarshalJSON() ([]byte, error) {
	objectMap := m.MediaJobStateChangeEventData.marshalInternal()
	populate(objectMap, "outputs", m.Outputs)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MediaJobErroredEventData.
func (m *MediaJobErroredEventData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "outputs":
				m.Outputs, err = unmarshalMediaJobOutputClassificationArray(val)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return m.MediaJobStateChangeEventData.unmarshalInternal(rawMsg)
}

// MediaJobFinishedEventData - Job finished event data. Schema of the data property of an EventGridEvent for a Microsoft.Media.JobFinished event.
type MediaJobFinishedEventData struct {
	MediaJobStateChangeEventData
	// Gets the Job outputs.
	Outputs []MediaJobOutputClassification `json:"outputs,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type MediaJobFinishedEventData.
func (m MediaJobFinishedEventData) MarshalJSON() ([]byte, error) {
	objectMap := m.MediaJobStateChangeEventData.marshalInternal()
	populate(objectMap, "outputs", m.Outputs)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MediaJobFinishedEventData.
func (m *MediaJobFinishedEventData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "outputs":
				m.Outputs, err = unmarshalMediaJobOutputClassificationArray(val)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return m.MediaJobStateChangeEventData.unmarshalInternal(rawMsg)
}

// MediaJobOutputClassification provides polymorphic access to related types.
// Call the interface's GetMediaJobOutput() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *MediaJobOutput, *MediaJobOutputAsset
type MediaJobOutputClassification interface {
	// GetMediaJobOutput returns the MediaJobOutput content of the underlying type.
	GetMediaJobOutput() *MediaJobOutput
}

// MediaJobOutput - The event data for a Job output.
type MediaJobOutput struct {
	// REQUIRED; The discriminator for derived types.
	OdataType *string `json:"@odata.type,omitempty"`

	// REQUIRED; Gets the Job output progress.
	Progress *int64 `json:"progress,omitempty"`

	// REQUIRED; Gets the Job output state.
	State *MediaJobState `json:"state,omitempty"`

	// Gets the Job output error.
	Error *MediaJobError `json:"error,omitempty"`

	// Gets the Job output label.
	Label *string `json:"label,omitempty"`
}

// GetMediaJobOutput implements the MediaJobOutputClassification interface for type MediaJobOutput.
func (m *MediaJobOutput) GetMediaJobOutput() *MediaJobOutput { return m }

// UnmarshalJSON implements the json.Unmarshaller interface for type MediaJobOutput.
func (m *MediaJobOutput) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return m.unmarshalInternal(rawMsg)
}

func (m MediaJobOutput) marshalInternal(discValue string) map[string]interface{} {
	objectMap := make(map[string]interface{})
	populate(objectMap, "error", m.Error)
	populate(objectMap, "label", m.Label)
	m.OdataType = &discValue
	objectMap["@odata.type"] = m.OdataType
	populate(objectMap, "progress", m.Progress)
	populate(objectMap, "state", m.State)
	return objectMap
}

func (m *MediaJobOutput) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "error":
				err = unpopulate(val, &m.Error)
				delete(rawMsg, key)
		case "label":
				err = unpopulate(val, &m.Label)
				delete(rawMsg, key)
		case "@odata.type":
				err = unpopulate(val, &m.OdataType)
				delete(rawMsg, key)
		case "progress":
				err = unpopulate(val, &m.Progress)
				delete(rawMsg, key)
		case "state":
				err = unpopulate(val, &m.State)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MediaJobOutputAsset - The event data for a Job output asset.
type MediaJobOutputAsset struct {
	MediaJobOutput
	// Gets the Job output asset name.
	AssetName *string `json:"assetName,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type MediaJobOutputAsset.
func (m MediaJobOutputAsset) MarshalJSON() ([]byte, error) {
	objectMap := m.MediaJobOutput.marshalInternal("#Microsoft.Media.JobOutputAsset")
	populate(objectMap, "assetName", m.AssetName)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MediaJobOutputAsset.
func (m *MediaJobOutputAsset) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "assetName":
				err = unpopulate(val, &m.AssetName)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return m.MediaJobOutput.unmarshalInternal(rawMsg)
}

// MediaJobOutputCanceledEventData - Job output canceled event data. Schema of the data property of an EventGridEvent for a Microsoft.Media.JobOutputCanceled
// event.
type MediaJobOutputCanceledEventData struct {
	MediaJobOutputStateChangeEventData
}

// MediaJobOutputCancelingEventData - Job output canceling event data. Schema of the data property of an EventGridEvent for a Microsoft.Media.JobOutputCanceling
// event.
type MediaJobOutputCancelingEventData struct {
	MediaJobOutputStateChangeEventData
}

// MediaJobOutputErroredEventData - Job output error event data. Schema of the data property of an EventGridEvent for a Microsoft.Media.JobOutputErrored
// event.
type MediaJobOutputErroredEventData struct {
	MediaJobOutputStateChangeEventData
}

// MediaJobOutputFinishedEventData - Job output finished event data. Schema of the data property of an EventGridEvent for a Microsoft.Media.JobOutputFinished
// event.
type MediaJobOutputFinishedEventData struct {
	MediaJobOutputStateChangeEventData
}

// MediaJobOutputProcessingEventData - Job output processing event data. Schema of the data property of an EventGridEvent for a Microsoft.Media.JobOutputProcessing
// event.
type MediaJobOutputProcessingEventData struct {
	MediaJobOutputStateChangeEventData
}

// MediaJobOutputProgressEventData - Job Output Progress Event Data. Schema of the Data property of an EventGridEvent for a Microsoft.Media.JobOutputProgress
// event.
type MediaJobOutputProgressEventData struct {
	// Gets the Job correlation data.
	JobCorrelationData map[string]*string `json:"jobCorrelationData,omitempty"`

	// Gets the Job output label.
	Label *string `json:"label,omitempty"`

	// Gets the Job output progress.
	Progress *int64 `json:"progress,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type MediaJobOutputProgressEventData.
func (m MediaJobOutputProgressEventData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "jobCorrelationData", m.JobCorrelationData)
	populate(objectMap, "label", m.Label)
	populate(objectMap, "progress", m.Progress)
	return json.Marshal(objectMap)
}

// MediaJobOutputScheduledEventData - Job output scheduled event data. Schema of the data property of an EventGridEvent for a Microsoft.Media.JobOutputScheduled
// event.
type MediaJobOutputScheduledEventData struct {
	MediaJobOutputStateChangeEventData
}

// MediaJobOutputStateChangeEventData - Schema of the Data property of an EventGridEvent for a Microsoft.Media.JobOutputStateChange event.
type MediaJobOutputStateChangeEventData struct {
	// Gets the Job correlation data.
	JobCorrelationData map[string]*string `json:"jobCorrelationData,omitempty"`

	// Gets the output.
	Output MediaJobOutputClassification `json:"output,omitempty"`

	// READ-ONLY; The previous state of the Job.
	PreviousState *MediaJobState `json:"previousState,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type MediaJobOutputStateChangeEventData.
func (m MediaJobOutputStateChangeEventData) MarshalJSON() ([]byte, error) {
	objectMap := m.marshalInternal()
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MediaJobOutputStateChangeEventData.
func (m *MediaJobOutputStateChangeEventData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return m.unmarshalInternal(rawMsg)
}

func (m MediaJobOutputStateChangeEventData) marshalInternal() map[string]interface{} {
	objectMap := make(map[string]interface{})
	populate(objectMap, "jobCorrelationData", m.JobCorrelationData)
	populate(objectMap, "output", m.Output)
	populate(objectMap, "previousState", m.PreviousState)
	return objectMap
}

func (m *MediaJobOutputStateChangeEventData) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "jobCorrelationData":
				err = unpopulate(val, &m.JobCorrelationData)
				delete(rawMsg, key)
		case "output":
				m.Output, err = unmarshalMediaJobOutputClassification(val)
				delete(rawMsg, key)
		case "previousState":
				err = unpopulate(val, &m.PreviousState)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MediaJobProcessingEventData - Job processing event data. Schema of the data property of an EventGridEvent for a Microsoft.Media.JobProcessing event.
type MediaJobProcessingEventData struct {
	MediaJobStateChangeEventData
}

// MediaJobScheduledEventData - Job scheduled event data. Schema of the data property of an EventGridEvent for a Microsoft.Media.JobScheduled event.
type MediaJobScheduledEventData struct {
	MediaJobStateChangeEventData
}

// MediaJobStateChangeEventData - Schema of the Data property of an EventGridEvent for a Microsoft.Media.JobStateChange event.
type MediaJobStateChangeEventData struct {
	// Gets the Job correlation data.
	CorrelationData map[string]*string `json:"correlationData,omitempty"`

	// READ-ONLY; The previous state of the Job.
	PreviousState *MediaJobState `json:"previousState,omitempty" azure:"ro"`

	// READ-ONLY; The new state of the Job.
	State *MediaJobState `json:"state,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type MediaJobStateChangeEventData.
func (m MediaJobStateChangeEventData) MarshalJSON() ([]byte, error) {
	objectMap := m.marshalInternal()
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MediaJobStateChangeEventData.
func (m *MediaJobStateChangeEventData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return m.unmarshalInternal(rawMsg)
}

func (m MediaJobStateChangeEventData) marshalInternal() map[string]interface{} {
	objectMap := make(map[string]interface{})
	populate(objectMap, "correlationData", m.CorrelationData)
	populate(objectMap, "previousState", m.PreviousState)
	populate(objectMap, "state", m.State)
	return objectMap
}

func (m *MediaJobStateChangeEventData) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "correlationData":
				err = unpopulate(val, &m.CorrelationData)
				delete(rawMsg, key)
		case "previousState":
				err = unpopulate(val, &m.PreviousState)
				delete(rawMsg, key)
		case "state":
				err = unpopulate(val, &m.State)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MediaLiveEventConnectionRejectedEventData - Encoder connection rejected event data. Schema of the data property of an EventGridEvent for a Microsoft.Media.LiveEventConnectionRejected
// event.
type MediaLiveEventConnectionRejectedEventData struct {
	// READ-ONLY; Gets the remote IP.
	EncoderIP *string `json:"encoderIp,omitempty" azure:"ro"`

	// READ-ONLY; Gets the remote port.
	EncoderPort *string `json:"encoderPort,omitempty" azure:"ro"`

	// READ-ONLY; Gets the ingest URL provided by the live event.
	IngestURL *string `json:"ingestUrl,omitempty" azure:"ro"`

	// READ-ONLY; Gets the result code.
	ResultCode *string `json:"resultCode,omitempty" azure:"ro"`

	// READ-ONLY; Gets the stream Id.
	StreamID *string `json:"streamId,omitempty" azure:"ro"`
}

// MediaLiveEventEncoderConnectedEventData - Encoder connect event data. Schema of the data property of an EventGridEvent for a Microsoft.Media.LiveEventEncoderConnected
// event.
type MediaLiveEventEncoderConnectedEventData struct {
	// READ-ONLY; Gets the remote IP.
	EncoderIP *string `json:"encoderIp,omitempty" azure:"ro"`

	// READ-ONLY; Gets the remote port.
	EncoderPort *string `json:"encoderPort,omitempty" azure:"ro"`

	// READ-ONLY; Gets the ingest URL provided by the live event.
	IngestURL *string `json:"ingestUrl,omitempty" azure:"ro"`

	// READ-ONLY; Gets the stream Id.
	StreamID *string `json:"streamId,omitempty" azure:"ro"`
}

// MediaLiveEventEncoderDisconnectedEventData - Encoder disconnected event data. Schema of the Data property of an EventGridEvent for a Microsoft.Media.LiveEventEncoderDisconnected
// event.
type MediaLiveEventEncoderDisconnectedEventData struct {
	// READ-ONLY; Gets the remote IP.
	EncoderIP *string `json:"encoderIp,omitempty" azure:"ro"`

	// READ-ONLY; Gets the remote port.
	EncoderPort *string `json:"encoderPort,omitempty" azure:"ro"`

	// READ-ONLY; Gets the ingest URL provided by the live event.
	IngestURL *string `json:"ingestUrl,omitempty" azure:"ro"`

	// READ-ONLY; Gets the result code.
	ResultCode *string `json:"resultCode,omitempty" azure:"ro"`

	// READ-ONLY; Gets the stream Id.
	StreamID *string `json:"streamId,omitempty" azure:"ro"`
}

// MediaLiveEventIncomingDataChunkDroppedEventData - Ingest fragment dropped event data. Schema of the data property of an EventGridEvent for a Microsoft.Media.LiveEventIncomingDataChunkDropped
// event.
type MediaLiveEventIncomingDataChunkDroppedEventData struct {
	// READ-ONLY; Gets the bitrate of the track.
	Bitrate *int64 `json:"bitrate,omitempty" azure:"ro"`

	// READ-ONLY; Gets the result code for fragment drop operation.
	ResultCode *string `json:"resultCode,omitempty" azure:"ro"`

	// READ-ONLY; Gets the timescale of the Timestamp.
	Timescale *string `json:"timescale,omitempty" azure:"ro"`

	// READ-ONLY; Gets the timestamp of the data chunk dropped.
	Timestamp *string `json:"timestamp,omitempty" azure:"ro"`

	// READ-ONLY; Gets the name of the track for which fragment is dropped.
	TrackName *string `json:"trackName,omitempty" azure:"ro"`

	// READ-ONLY; Gets the type of the track (Audio / Video).
	TrackType *string `json:"trackType,omitempty" azure:"ro"`
}

// MediaLiveEventIncomingStreamReceivedEventData - Encoder connect event data. Schema of the data property of an EventGridEvent for a Microsoft.Media.LiveEventIncomingStreamReceived
// event.
type MediaLiveEventIncomingStreamReceivedEventData struct {
	// READ-ONLY; Gets the bitrate of the track.
	Bitrate *int64 `json:"bitrate,omitempty" azure:"ro"`

	// READ-ONLY; Gets the duration of the first data chunk.
	Duration *string `json:"duration,omitempty" azure:"ro"`

	// READ-ONLY; Gets the remote IP.
	EncoderIP *string `json:"encoderIp,omitempty" azure:"ro"`

	// READ-ONLY; Gets the remote port.
	EncoderPort *string `json:"encoderPort,omitempty" azure:"ro"`

	// READ-ONLY; Gets the ingest URL provided by the live event.
	IngestURL *string `json:"ingestUrl,omitempty" azure:"ro"`

	// READ-ONLY; Gets the timescale in which timestamp is represented.
	Timescale *string `json:"timescale,omitempty" azure:"ro"`

	// READ-ONLY; Gets the first timestamp of the data chunk received.
	Timestamp *string `json:"timestamp,omitempty" azure:"ro"`

	// READ-ONLY; Gets the track name.
	TrackName *string `json:"trackName,omitempty" azure:"ro"`

	// READ-ONLY; Gets the type of the track (Audio / Video).
	TrackType *string `json:"trackType,omitempty" azure:"ro"`
}

// MediaLiveEventIncomingStreamsOutOfSyncEventData - Incoming streams out of sync event data. Schema of the data property of an EventGridEvent for a Microsoft.Media.LiveEventIncomingStreamsOutOfSync
// event.
type MediaLiveEventIncomingStreamsOutOfSyncEventData struct {
	// READ-ONLY; Gets the maximum timestamp among all the tracks (audio or video).
	MaxLastTimestamp *string `json:"maxLastTimestamp,omitempty" azure:"ro"`

	// READ-ONLY; Gets the minimum last timestamp received.
	MinLastTimestamp *string `json:"minLastTimestamp,omitempty" azure:"ro"`

	// READ-ONLY; Gets the timescale in which "MaxLastTimestamp" is represented.
	TimescaleOfMaxLastTimestamp *string `json:"timescaleOfMaxLastTimestamp,omitempty" azure:"ro"`

	// READ-ONLY; Gets the timescale in which "MinLastTimestamp" is represented.
	TimescaleOfMinLastTimestamp *string `json:"timescaleOfMinLastTimestamp,omitempty" azure:"ro"`

	// READ-ONLY; Gets the type of stream with maximum last timestamp.
	TypeOfStreamWithMaxLastTimestamp *string `json:"typeOfStreamWithMaxLastTimestamp,omitempty" azure:"ro"`

	// READ-ONLY; Gets the type of stream with minimum last timestamp.
	TypeOfStreamWithMinLastTimestamp *string `json:"typeOfStreamWithMinLastTimestamp,omitempty" azure:"ro"`
}

// MediaLiveEventIncomingVideoStreamsOutOfSyncEventData - Incoming video stream out of synch event data. Schema of the data property of an EventGridEvent
// for a Microsoft.Media.LiveEventIncomingVideoStreamsOutOfSync event.
type MediaLiveEventIncomingVideoStreamsOutOfSyncEventData struct {
	// READ-ONLY; Gets the duration of the data chunk with first timestamp.
	FirstDuration *string `json:"firstDuration,omitempty" azure:"ro"`

	// READ-ONLY; Gets the first timestamp received for one of the quality levels.
	FirstTimestamp *string `json:"firstTimestamp,omitempty" azure:"ro"`

	// READ-ONLY; Gets the duration of the data chunk with second timestamp.
	SecondDuration *string `json:"secondDuration,omitempty" azure:"ro"`

	// READ-ONLY; Gets the timestamp received for some other quality levels.
	SecondTimestamp *string `json:"secondTimestamp,omitempty" azure:"ro"`

	// READ-ONLY; Gets the timescale in which both the timestamps and durations are represented.
	Timescale *string `json:"timescale,omitempty" azure:"ro"`
}

// MediaLiveEventIngestHeartbeatEventData - Ingest fragment dropped event data. Schema of the data property of an EventGridEvent for a Microsoft.Media.LiveEventIngestHeartbeat
// event.
type MediaLiveEventIngestHeartbeatEventData struct {
	// READ-ONLY; Gets the bitrate of the track.
	Bitrate *int64 `json:"bitrate,omitempty" azure:"ro"`

	// READ-ONLY; Gets the fragment Discontinuity count.
	DiscontinuityCount *int64 `json:"discontinuityCount,omitempty" azure:"ro"`

	// READ-ONLY; Gets a value indicating whether preview is healthy or not.
	Healthy *bool `json:"healthy,omitempty" azure:"ro"`

	// READ-ONLY; Gets the incoming bitrate.
	IncomingBitrate *int64 `json:"incomingBitrate,omitempty" azure:"ro"`

	// READ-ONLY; Gets the last timestamp.
	LastTimestamp *string `json:"lastTimestamp,omitempty" azure:"ro"`

	// READ-ONLY; Gets Non increasing count.
	NonincreasingCount *int64 `json:"nonincreasingCount,omitempty" azure:"ro"`

	// READ-ONLY; Gets the fragment Overlap count.
	OverlapCount *int64 `json:"overlapCount,omitempty" azure:"ro"`

	// READ-ONLY; Gets the state of the live event.
	State *string `json:"state,omitempty" azure:"ro"`

	// READ-ONLY; Gets the timescale of the last timestamp.
	Timescale *string `json:"timescale,omitempty" azure:"ro"`

	// READ-ONLY; Gets the track name.
	TrackName *string `json:"trackName,omitempty" azure:"ro"`

	// READ-ONLY; Gets the type of the track (Audio / Video).
	TrackType *string `json:"trackType,omitempty" azure:"ro"`

	// READ-ONLY; Gets a value indicating whether unexpected bitrate is present or not.
	UnexpectedBitrate *bool `json:"unexpectedBitrate,omitempty" azure:"ro"`
}

// MediaLiveEventTrackDiscontinuityDetectedEventData - Ingest track discontinuity detected event data. Schema of the data property of an EventGridEvent
// for a Microsoft.Media.LiveEventTrackDiscontinuityDetected event.
type MediaLiveEventTrackDiscontinuityDetectedEventData struct {
	// READ-ONLY; Gets the bitrate.
	Bitrate *int64 `json:"bitrate,omitempty" azure:"ro"`

	// READ-ONLY; Gets the discontinuity gap between PreviousTimestamp and NewTimestamp.
	DiscontinuityGap *string `json:"discontinuityGap,omitempty" azure:"ro"`

	// READ-ONLY; Gets the timestamp of the current fragment.
	NewTimestamp *string `json:"newTimestamp,omitempty" azure:"ro"`

	// READ-ONLY; Gets the timestamp of the previous fragment.
	PreviousTimestamp *string `json:"previousTimestamp,omitempty" azure:"ro"`

	// READ-ONLY; Gets the timescale in which both timestamps and discontinuity gap are represented.
	Timescale *string `json:"timescale,omitempty" azure:"ro"`

	// READ-ONLY; Gets the track name.
	TrackName *string `json:"trackName,omitempty" azure:"ro"`

	// READ-ONLY; Gets the type of the track (Audio / Video).
	TrackType *string `json:"trackType,omitempty" azure:"ro"`
}

// MicrosoftTeamsUserIdentifierModel - A Microsoft Teams user.
type MicrosoftTeamsUserIdentifierModel struct {
	// REQUIRED; The Id of the Microsoft Teams user. If not anonymous, this is the AAD object Id of the user.
	UserID *string `json:"userId,omitempty"`

	// The cloud that the Microsoft Teams user belongs to. By default 'public' if missing.
	Cloud *CommunicationCloudEnvironmentModel `json:"cloud,omitempty"`

	// True if the Microsoft Teams user is anonymous. By default false if missing.
	IsAnonymous *bool `json:"isAnonymous,omitempty"`
}

// PhoneNumberIdentifierModel - A phone number.
type PhoneNumberIdentifierModel struct {
	// REQUIRED; The phone number in E.164 format.
	Value *string `json:"value,omitempty"`
}

// PolicyInsightsPolicyStateChangedEventData - Schema of the Data property of an EventGridEvent for a Microsoft.PolicyInsights.PolicyStateChanged event.
type PolicyInsightsPolicyStateChangedEventData struct {
	// The compliance reason code. May be empty.
	ComplianceReasonCode *string `json:"complianceReasonCode,omitempty"`

	// The compliance state of the resource with respect to the policy assignment.
	ComplianceState *string `json:"complianceState,omitempty"`

	// The resource ID of the policy assignment.
	PolicyAssignmentID *string `json:"policyAssignmentId,omitempty"`

	// The resource ID of the policy definition.
	PolicyDefinitionID *string `json:"policyDefinitionId,omitempty"`

	// The reference ID for the policy definition inside the initiative definition, if the policy assignment is for an initiative. May be empty.
	PolicyDefinitionReferenceID *string `json:"policyDefinitionReferenceId,omitempty"`

	// The subscription ID of the resource.
	SubscriptionID *string `json:"subscriptionId,omitempty"`

	// The time that the resource was scanned by Azure Policy in the Universal ISO 8601 DateTime format yyyy-MM-ddTHH:mm:ss.fffffffZ.
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PolicyInsightsPolicyStateChangedEventData.
func (p PolicyInsightsPolicyStateChangedEventData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "complianceReasonCode", p.ComplianceReasonCode)
	populate(objectMap, "complianceState", p.ComplianceState)
	populate(objectMap, "policyAssignmentId", p.PolicyAssignmentID)
	populate(objectMap, "policyDefinitionId", p.PolicyDefinitionID)
	populate(objectMap, "policyDefinitionReferenceId", p.PolicyDefinitionReferenceID)
	populate(objectMap, "subscriptionId", p.SubscriptionID)
	populate(objectMap, "timestamp", (*timeRFC3339)(p.Timestamp))
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type PolicyInsightsPolicyStateChangedEventData.
func (p *PolicyInsightsPolicyStateChangedEventData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "complianceReasonCode":
				err = unpopulate(val, &p.ComplianceReasonCode)
				delete(rawMsg, key)
		case "complianceState":
				err = unpopulate(val, &p.ComplianceState)
				delete(rawMsg, key)
		case "policyAssignmentId":
				err = unpopulate(val, &p.PolicyAssignmentID)
				delete(rawMsg, key)
		case "policyDefinitionId":
				err = unpopulate(val, &p.PolicyDefinitionID)
				delete(rawMsg, key)
		case "policyDefinitionReferenceId":
				err = unpopulate(val, &p.PolicyDefinitionReferenceID)
				delete(rawMsg, key)
		case "subscriptionId":
				err = unpopulate(val, &p.SubscriptionID)
				delete(rawMsg, key)
		case "timestamp":
				var aux timeRFC3339
				err = unpopulate(val, &aux)
				p.Timestamp = (*time.Time)(&aux)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// PolicyInsightsPolicyStateCreatedEventData - Schema of the Data property of an EventGridEvent for a Microsoft.PolicyInsights.PolicyStateCreated event.
type PolicyInsightsPolicyStateCreatedEventData struct {
	// The compliance reason code. May be empty.
	ComplianceReasonCode *string `json:"complianceReasonCode,omitempty"`

	// The compliance state of the resource with respect to the policy assignment.
	ComplianceState *string `json:"complianceState,omitempty"`

	// The resource ID of the policy assignment.
	PolicyAssignmentID *string `json:"policyAssignmentId,omitempty"`

	// The resource ID of the policy definition.
	PolicyDefinitionID *string `json:"policyDefinitionId,omitempty"`

	// The reference ID for the policy definition inside the initiative definition, if the policy assignment is for an initiative. May be empty.
	PolicyDefinitionReferenceID *string `json:"policyDefinitionReferenceId,omitempty"`

	// The subscription ID of the resource.
	SubscriptionID *string `json:"subscriptionId,omitempty"`

	// The time that the resource was scanned by Azure Policy in the Universal ISO 8601 DateTime format yyyy-MM-ddTHH:mm:ss.fffffffZ.
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PolicyInsightsPolicyStateCreatedEventData.
func (p PolicyInsightsPolicyStateCreatedEventData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "complianceReasonCode", p.ComplianceReasonCode)
	populate(objectMap, "complianceState", p.ComplianceState)
	populate(objectMap, "policyAssignmentId", p.PolicyAssignmentID)
	populate(objectMap, "policyDefinitionId", p.PolicyDefinitionID)
	populate(objectMap, "policyDefinitionReferenceId", p.PolicyDefinitionReferenceID)
	populate(objectMap, "subscriptionId", p.SubscriptionID)
	populate(objectMap, "timestamp", (*timeRFC3339)(p.Timestamp))
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type PolicyInsightsPolicyStateCreatedEventData.
func (p *PolicyInsightsPolicyStateCreatedEventData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "complianceReasonCode":
				err = unpopulate(val, &p.ComplianceReasonCode)
				delete(rawMsg, key)
		case "complianceState":
				err = unpopulate(val, &p.ComplianceState)
				delete(rawMsg, key)
		case "policyAssignmentId":
				err = unpopulate(val, &p.PolicyAssignmentID)
				delete(rawMsg, key)
		case "policyDefinitionId":
				err = unpopulate(val, &p.PolicyDefinitionID)
				delete(rawMsg, key)
		case "policyDefinitionReferenceId":
				err = unpopulate(val, &p.PolicyDefinitionReferenceID)
				delete(rawMsg, key)
		case "subscriptionId":
				err = unpopulate(val, &p.SubscriptionID)
				delete(rawMsg, key)
		case "timestamp":
				var aux timeRFC3339
				err = unpopulate(val, &aux)
				p.Timestamp = (*time.Time)(&aux)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// PolicyInsightsPolicyStateDeletedEventData - Schema of the Data property of an EventGridEvent for a Microsoft.PolicyInsights.PolicyStateDeleted event.
type PolicyInsightsPolicyStateDeletedEventData struct {
	// The compliance reason code. May be empty.
	ComplianceReasonCode *string `json:"complianceReasonCode,omitempty"`

	// The compliance state of the resource with respect to the policy assignment.
	ComplianceState *string `json:"complianceState,omitempty"`

	// The resource ID of the policy assignment.
	PolicyAssignmentID *string `json:"policyAssignmentId,omitempty"`

	// The resource ID of the policy definition.
	PolicyDefinitionID *string `json:"policyDefinitionId,omitempty"`

	// The reference ID for the policy definition inside the initiative definition, if the policy assignment is for an initiative. May be empty.
	PolicyDefinitionReferenceID *string `json:"policyDefinitionReferenceId,omitempty"`

	// The subscription ID of the resource.
	SubscriptionID *string `json:"subscriptionId,omitempty"`

	// The time that the resource was scanned by Azure Policy in the Universal ISO 8601 DateTime format yyyy-MM-ddTHH:mm:ss.fffffffZ.
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PolicyInsightsPolicyStateDeletedEventData.
func (p PolicyInsightsPolicyStateDeletedEventData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "complianceReasonCode", p.ComplianceReasonCode)
	populate(objectMap, "complianceState", p.ComplianceState)
	populate(objectMap, "policyAssignmentId", p.PolicyAssignmentID)
	populate(objectMap, "policyDefinitionId", p.PolicyDefinitionID)
	populate(objectMap, "policyDefinitionReferenceId", p.PolicyDefinitionReferenceID)
	populate(objectMap, "subscriptionId", p.SubscriptionID)
	populate(objectMap, "timestamp", (*timeRFC3339)(p.Timestamp))
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type PolicyInsightsPolicyStateDeletedEventData.
func (p *PolicyInsightsPolicyStateDeletedEventData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "complianceReasonCode":
				err = unpopulate(val, &p.ComplianceReasonCode)
				delete(rawMsg, key)
		case "complianceState":
				err = unpopulate(val, &p.ComplianceState)
				delete(rawMsg, key)
		case "policyAssignmentId":
				err = unpopulate(val, &p.PolicyAssignmentID)
				delete(rawMsg, key)
		case "policyDefinitionId":
				err = unpopulate(val, &p.PolicyDefinitionID)
				delete(rawMsg, key)
		case "policyDefinitionReferenceId":
				err = unpopulate(val, &p.PolicyDefinitionReferenceID)
				delete(rawMsg, key)
		case "subscriptionId":
				err = unpopulate(val, &p.SubscriptionID)
				delete(rawMsg, key)
		case "timestamp":
				var aux timeRFC3339
				err = unpopulate(val, &aux)
				p.Timestamp = (*time.Time)(&aux)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// RedisExportRDBCompletedEventData - Schema of the Data property of an EventGridEvent for a Microsoft.Cache.ExportRDBCompleted event.
type RedisExportRDBCompletedEventData struct {
	// The name of this event.
	Name *string `json:"name,omitempty"`

	// The status of this event. Failed or succeeded
	Status *string `json:"status,omitempty"`

	// The time at which the event occurred.
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type RedisExportRDBCompletedEventData.
func (r RedisExportRDBCompletedEventData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "name", r.Name)
	populate(objectMap, "status", r.Status)
	populate(objectMap, "timestamp", (*timeRFC3339)(r.Timestamp))
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RedisExportRDBCompletedEventData.
func (r *RedisExportRDBCompletedEventData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "name":
				err = unpopulate(val, &r.Name)
				delete(rawMsg, key)
		case "status":
				err = unpopulate(val, &r.Status)
				delete(rawMsg, key)
		case "timestamp":
				var aux timeRFC3339
				err = unpopulate(val, &aux)
				r.Timestamp = (*time.Time)(&aux)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// RedisImportRDBCompletedEventData - Schema of the Data property of an EventGridEvent for a Microsoft.Cache.ImportRDBCompleted event.
type RedisImportRDBCompletedEventData struct {
	// The name of this event.
	Name *string `json:"name,omitempty"`

	// The status of this event. Failed or succeeded
	Status *string `json:"status,omitempty"`

	// The time at which the event occurred.
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type RedisImportRDBCompletedEventData.
func (r RedisImportRDBCompletedEventData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "name", r.Name)
	populate(objectMap, "status", r.Status)
	populate(objectMap, "timestamp", (*timeRFC3339)(r.Timestamp))
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RedisImportRDBCompletedEventData.
func (r *RedisImportRDBCompletedEventData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "name":
				err = unpopulate(val, &r.Name)
				delete(rawMsg, key)
		case "status":
				err = unpopulate(val, &r.Status)
				delete(rawMsg, key)
		case "timestamp":
				var aux timeRFC3339
				err = unpopulate(val, &aux)
				r.Timestamp = (*time.Time)(&aux)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// RedisPatchingCompletedEventData - Schema of the Data property of an EventGridEvent for a Microsoft.Cache.PatchingCompleted event.
type RedisPatchingCompletedEventData struct {
	// The name of this event.
	Name *string `json:"name,omitempty"`

	// The status of this event. Failed or succeeded
	Status *string `json:"status,omitempty"`

	// The time at which the event occurred.
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type RedisPatchingCompletedEventData.
func (r RedisPatchingCompletedEventData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "name", r.Name)
	populate(objectMap, "status", r.Status)
	populate(objectMap, "timestamp", (*timeRFC3339)(r.Timestamp))
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RedisPatchingCompletedEventData.
func (r *RedisPatchingCompletedEventData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "name":
				err = unpopulate(val, &r.Name)
				delete(rawMsg, key)
		case "status":
				err = unpopulate(val, &r.Status)
				delete(rawMsg, key)
		case "timestamp":
				var aux timeRFC3339
				err = unpopulate(val, &aux)
				r.Timestamp = (*time.Time)(&aux)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// RedisScalingCompletedEventData - Schema of the Data property of an EventGridEvent for a Microsoft.Cache.ScalingCompleted event.
type RedisScalingCompletedEventData struct {
	// The name of this event.
	Name *string `json:"name,omitempty"`

	// The status of this event. Failed or succeeded
	Status *string `json:"status,omitempty"`

	// The time at which the event occurred.
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type RedisScalingCompletedEventData.
func (r RedisScalingCompletedEventData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "name", r.Name)
	populate(objectMap, "status", r.Status)
	populate(objectMap, "timestamp", (*timeRFC3339)(r.Timestamp))
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RedisScalingCompletedEventData.
func (r *RedisScalingCompletedEventData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "name":
				err = unpopulate(val, &r.Name)
				delete(rawMsg, key)
		case "status":
				err = unpopulate(val, &r.Status)
				delete(rawMsg, key)
		case "timestamp":
				var aux timeRFC3339
				err = unpopulate(val, &aux)
				r.Timestamp = (*time.Time)(&aux)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// ResourceActionCancelEventData - Schema of the Data property of an EventGridEvent for a Microsoft.Resources.ResourceActionCancel event. This is raised
// when a resource action operation is canceled.
type ResourceActionCancelEventData struct {
	// The requested authorization for the operation.
	Authorization *string `json:"authorization,omitempty"`

	// The properties of the claims.
	Claims *string `json:"claims,omitempty"`

	// An operation ID used for troubleshooting.
	CorrelationID *string `json:"correlationId,omitempty"`

	// The details of the operation.
	HTTPRequest *string `json:"httpRequest,omitempty"`

	// The operation that was performed.
	OperationName *string `json:"operationName,omitempty"`

	// The resource group of the resource.
	ResourceGroup *string `json:"resourceGroup,omitempty"`

	// The resource provider performing the operation.
	ResourceProvider *string `json:"resourceProvider,omitempty"`

	// The URI of the resource in the operation.
	ResourceURI *string `json:"resourceUri,omitempty"`

	// The status of the operation.
	Status *string `json:"status,omitempty"`

	// The subscription ID of the resource.
	SubscriptionID *string `json:"subscriptionId,omitempty"`

	// The tenant ID of the resource.
	TenantID *string `json:"tenantId,omitempty"`
}

// ResourceActionFailureEventData - Schema of the Data property of an EventGridEvent for a Microsoft.Resources.ResourceActionFailure event. This is raised
// when a resource action operation fails.
type ResourceActionFailureEventData struct {
	// The requested authorization for the operation.
	Authorization *string `json:"authorization,omitempty"`

	// The properties of the claims.
	Claims *string `json:"claims,omitempty"`

	// An operation ID used for troubleshooting.
	CorrelationID *string `json:"correlationId,omitempty"`

	// The details of the operation.
	HTTPRequest *string `json:"httpRequest,omitempty"`

	// The operation that was performed.
	OperationName *string `json:"operationName,omitempty"`

	// The resource group of the resource.
	ResourceGroup *string `json:"resourceGroup,omitempty"`

	// The resource provider performing the operation.
	ResourceProvider *string `json:"resourceProvider,omitempty"`

	// The URI of the resource in the operation.
	ResourceURI *string `json:"resourceUri,omitempty"`

	// The status of the operation.
	Status *string `json:"status,omitempty"`

	// The subscription ID of the resource.
	SubscriptionID *string `json:"subscriptionId,omitempty"`

	// The tenant ID of the resource.
	TenantID *string `json:"tenantId,omitempty"`
}

// ResourceActionSuccessEventData - Schema of the Data property of an EventGridEvent for a Microsoft.Resources.ResourceActionSuccess event. This is raised
// when a resource action operation succeeds.
type ResourceActionSuccessEventData struct {
	// The requested authorization for the operation.
	Authorization *string `json:"authorization,omitempty"`

	// The properties of the claims.
	Claims *string `json:"claims,omitempty"`

	// An operation ID used for troubleshooting.
	CorrelationID *string `json:"correlationId,omitempty"`

	// The details of the operation.
	HTTPRequest *string `json:"httpRequest,omitempty"`

	// The operation that was performed.
	OperationName *string `json:"operationName,omitempty"`

	// The resource group of the resource.
	ResourceGroup *string `json:"resourceGroup,omitempty"`

	// The resource provider performing the operation.
	ResourceProvider *string `json:"resourceProvider,omitempty"`

	// The URI of the resource in the operation.
	ResourceURI *string `json:"resourceUri,omitempty"`

	// The status of the operation.
	Status *string `json:"status,omitempty"`

	// The subscription ID of the resource.
	SubscriptionID *string `json:"subscriptionId,omitempty"`

	// The tenant ID of the resource.
	TenantID *string `json:"tenantId,omitempty"`
}

// ResourceDeleteCancelEventData - Schema of the Data property of an EventGridEvent for a Microsoft.Resources.ResourceDeleteCancel event. This is raised
// when a resource delete operation is canceled.
type ResourceDeleteCancelEventData struct {
	// The requested authorization for the operation.
	Authorization *string `json:"authorization,omitempty"`

	// The properties of the claims.
	Claims *string `json:"claims,omitempty"`

	// An operation ID used for troubleshooting.
	CorrelationID *string `json:"correlationId,omitempty"`

	// The details of the operation.
	HTTPRequest *string `json:"httpRequest,omitempty"`

	// The operation that was performed.
	OperationName *string `json:"operationName,omitempty"`

	// The resource group of the resource.
	ResourceGroup *string `json:"resourceGroup,omitempty"`

	// The resource provider performing the operation.
	ResourceProvider *string `json:"resourceProvider,omitempty"`

	// The URI of the resource in the operation.
	ResourceURI *string `json:"resourceUri,omitempty"`

	// The status of the operation.
	Status *string `json:"status,omitempty"`

	// The subscription ID of the resource.
	SubscriptionID *string `json:"subscriptionId,omitempty"`

	// The tenant ID of the resource.
	TenantID *string `json:"tenantId,omitempty"`
}

// ResourceDeleteFailureEventData - Schema of the Data property of an EventGridEvent for a Microsoft.Resources.ResourceDeleteFailure event. This is raised
// when a resource delete operation fails.
type ResourceDeleteFailureEventData struct {
	// The requested authorization for the operation.
	Authorization *string `json:"authorization,omitempty"`

	// The properties of the claims.
	Claims *string `json:"claims,omitempty"`

	// An operation ID used for troubleshooting.
	CorrelationID *string `json:"correlationId,omitempty"`

	// The details of the operation.
	HTTPRequest *string `json:"httpRequest,omitempty"`

	// The operation that was performed.
	OperationName *string `json:"operationName,omitempty"`

	// The resource group of the resource.
	ResourceGroup *string `json:"resourceGroup,omitempty"`

	// The resource provider performing the operation.
	ResourceProvider *string `json:"resourceProvider,omitempty"`

	// The URI of the resource in the operation.
	ResourceURI *string `json:"resourceUri,omitempty"`

	// The status of the operation.
	Status *string `json:"status,omitempty"`

	// The subscription ID of the resource.
	SubscriptionID *string `json:"subscriptionId,omitempty"`

	// The tenant ID of the resource.
	TenantID *string `json:"tenantId,omitempty"`
}

// ResourceDeleteSuccessEventData - Schema of the Data property of an EventGridEvent for a Microsoft.Resources.ResourceDeleteSuccess event. This is raised
// when a resource delete operation succeeds.
type ResourceDeleteSuccessEventData struct {
	// The requested authorization for the operation.
	Authorization *string `json:"authorization,omitempty"`

	// The properties of the claims.
	Claims *string `json:"claims,omitempty"`

	// An operation ID used for troubleshooting.
	CorrelationID *string `json:"correlationId,omitempty"`

	// The details of the operation.
	HTTPRequest *string `json:"httpRequest,omitempty"`

	// The operation that was performed.
	OperationName *string `json:"operationName,omitempty"`

	// The resource group of the resource.
	ResourceGroup *string `json:"resourceGroup,omitempty"`

	// The resource provider performing the operation.
	ResourceProvider *string `json:"resourceProvider,omitempty"`

	// The URI of the resource in the operation.
	ResourceURI *string `json:"resourceUri,omitempty"`

	// The status of the operation.
	Status *string `json:"status,omitempty"`

	// The subscription ID of the resource.
	SubscriptionID *string `json:"subscriptionId,omitempty"`

	// The tenant ID of the resource.
	TenantID *string `json:"tenantId,omitempty"`
}

// ResourceWriteCancelEventData - Schema of the Data property of an EventGridEvent for a Microsoft.Resources.ResourceWriteCancel event. This is raised when
// a resource create or update operation is canceled.
type ResourceWriteCancelEventData struct {
	// The requested authorization for the operation.
	Authorization *string `json:"authorization,omitempty"`

	// The properties of the claims.
	Claims *string `json:"claims,omitempty"`

	// An operation ID used for troubleshooting.
	CorrelationID *string `json:"correlationId,omitempty"`

	// The details of the operation.
	HTTPRequest *string `json:"httpRequest,omitempty"`

	// The operation that was performed.
	OperationName *string `json:"operationName,omitempty"`

	// The resource group of the resource.
	ResourceGroup *string `json:"resourceGroup,omitempty"`

	// The resource provider performing the operation.
	ResourceProvider *string `json:"resourceProvider,omitempty"`

	// The URI of the resource in the operation.
	ResourceURI *string `json:"resourceUri,omitempty"`

	// The status of the operation.
	Status *string `json:"status,omitempty"`

	// The subscription ID of the resource.
	SubscriptionID *string `json:"subscriptionId,omitempty"`

	// The tenant ID of the resource.
	TenantID *string `json:"tenantId,omitempty"`
}

// ResourceWriteFailureEventData - Schema of the Data property of an EventGridEvent for a Microsoft.Resources.ResourceWriteFailure event. This is raised
// when a resource create or update operation fails.
type ResourceWriteFailureEventData struct {
	// The requested authorization for the operation.
	Authorization *string `json:"authorization,omitempty"`

	// The properties of the claims.
	Claims *string `json:"claims,omitempty"`

	// An operation ID used for troubleshooting.
	CorrelationID *string `json:"correlationId,omitempty"`

	// The details of the operation.
	HTTPRequest *string `json:"httpRequest,omitempty"`

	// The operation that was performed.
	OperationName *string `json:"operationName,omitempty"`

	// The resource group of the resource.
	ResourceGroup *string `json:"resourceGroup,omitempty"`

	// The resource provider performing the operation.
	ResourceProvider *string `json:"resourceProvider,omitempty"`

	// The URI of the resource in the operation.
	ResourceURI *string `json:"resourceUri,omitempty"`

	// The status of the operation.
	Status *string `json:"status,omitempty"`

	// The subscription ID of the resource.
	SubscriptionID *string `json:"subscriptionId,omitempty"`

	// The tenant ID of the resource.
	TenantID *string `json:"tenantId,omitempty"`
}

// ResourceWriteSuccessEventData - Schema of the Data property of an EventGridEvent for a Microsoft.Resources.ResourceWriteSuccess event. This is raised
// when a resource create or update operation succeeds.
type ResourceWriteSuccessEventData struct {
	// The requested authorization for the operation.
	Authorization *string `json:"authorization,omitempty"`

	// The properties of the claims.
	Claims *string `json:"claims,omitempty"`

	// An operation ID used for troubleshooting.
	CorrelationID *string `json:"correlationId,omitempty"`

	// The details of the operation.
	HTTPRequest *string `json:"httpRequest,omitempty"`

	// The operation that was performed.
	OperationName *string `json:"operationName,omitempty"`

	// The resource group of the resource.
	ResourceGroup *string `json:"resourceGroup,omitempty"`

	// The resource provider performing the operation.
	ResourceProvider *string `json:"resourceProvider,omitempty"`

	// The URI of the resource in the operation.
	ResourceURI *string `json:"resourceUri,omitempty"`

	// The status of the operation.
	Status *string `json:"status,omitempty"`

	// The subscription ID of the resource.
	SubscriptionID *string `json:"subscriptionId,omitempty"`

	// The tenant ID of the resource.
	TenantID *string `json:"tenantId,omitempty"`
}

// ServiceBusActiveMessagesAvailablePeriodicNotificationsEventData - Schema of the Data property of an EventGridEvent for a Microsoft.ServiceBus.ActiveMessagesAvailablePeriodicNotifications
// event.
type ServiceBusActiveMessagesAvailablePeriodicNotificationsEventData struct {
	// The entity type of the Microsoft.ServiceBus resource. Could be one of 'queue' or 'subscriber'.
	EntityType *string `json:"entityType,omitempty"`

	// The namespace name of the Microsoft.ServiceBus resource.
	NamespaceName *string `json:"namespaceName,omitempty"`

	// The name of the Microsoft.ServiceBus queue. If the entity type is of type 'subscriber', then this value will be null.
	QueueName *string `json:"queueName,omitempty"`

	// The endpoint of the Microsoft.ServiceBus resource.
	RequestURI *string `json:"requestUri,omitempty"`

	// The name of the Microsoft.ServiceBus topic's subscription. If the entity type is of type 'queue', then this value will be null.
	SubscriptionName *string `json:"subscriptionName,omitempty"`

	// The name of the Microsoft.ServiceBus topic. If the entity type is of type 'queue', then this value will be null.
	TopicName *string `json:"topicName,omitempty"`
}

// ServiceBusActiveMessagesAvailableWithNoListenersEventData - Schema of the Data property of an EventGridEvent for a Microsoft.ServiceBus.ActiveMessagesAvailableWithNoListeners
// event.
type ServiceBusActiveMessagesAvailableWithNoListenersEventData struct {
	// The entity type of the Microsoft.ServiceBus resource. Could be one of 'queue' or 'subscriber'.
	EntityType *string `json:"entityType,omitempty"`

	// The namespace name of the Microsoft.ServiceBus resource.
	NamespaceName *string `json:"namespaceName,omitempty"`

	// The name of the Microsoft.ServiceBus queue. If the entity type is of type 'subscriber', then this value will be null.
	QueueName *string `json:"queueName,omitempty"`

	// The endpoint of the Microsoft.ServiceBus resource.
	RequestURI *string `json:"requestUri,omitempty"`

	// The name of the Microsoft.ServiceBus topic's subscription. If the entity type is of type 'queue', then this value will be null.
	SubscriptionName *string `json:"subscriptionName,omitempty"`

	// The name of the Microsoft.ServiceBus topic. If the entity type is of type 'queue', then this value will be null.
	TopicName *string `json:"topicName,omitempty"`
}

// ServiceBusDeadletterMessagesAvailablePeriodicNotificationsEventData - Schema of the Data property of an EventGridEvent for a Microsoft.ServiceBus.DeadletterMessagesAvailablePeriodicNotifications
// event.
type ServiceBusDeadletterMessagesAvailablePeriodicNotificationsEventData struct {
	// The entity type of the Microsoft.ServiceBus resource. Could be one of 'queue' or 'subscriber'.
	EntityType *string `json:"entityType,omitempty"`

	// The namespace name of the Microsoft.ServiceBus resource.
	NamespaceName *string `json:"namespaceName,omitempty"`

	// The name of the Microsoft.ServiceBus queue. If the entity type is of type 'subscriber', then this value will be null.
	QueueName *string `json:"queueName,omitempty"`

	// The endpoint of the Microsoft.ServiceBus resource.
	RequestURI *string `json:"requestUri,omitempty"`

	// The name of the Microsoft.ServiceBus topic's subscription. If the entity type is of type 'queue', then this value will be null.
	SubscriptionName *string `json:"subscriptionName,omitempty"`

	// The name of the Microsoft.ServiceBus topic. If the entity type is of type 'queue', then this value will be null.
	TopicName *string `json:"topicName,omitempty"`
}

// ServiceBusDeadletterMessagesAvailableWithNoListenersEventData - Schema of the Data property of an EventGridEvent for a Microsoft.ServiceBus.DeadletterMessagesAvailableWithNoListenersEvent
// event.
type ServiceBusDeadletterMessagesAvailableWithNoListenersEventData struct {
	// The entity type of the Microsoft.ServiceBus resource. Could be one of 'queue' or 'subscriber'.
	EntityType *string `json:"entityType,omitempty"`

	// The namespace name of the Microsoft.ServiceBus resource.
	NamespaceName *string `json:"namespaceName,omitempty"`

	// The name of the Microsoft.ServiceBus queue. If the entity type is of type 'subscriber', then this value will be null.
	QueueName *string `json:"queueName,omitempty"`

	// The endpoint of the Microsoft.ServiceBus resource.
	RequestURI *string `json:"requestUri,omitempty"`

	// The name of the Microsoft.ServiceBus topic's subscription. If the entity type is of type 'queue', then this value will be null.
	SubscriptionName *string `json:"subscriptionName,omitempty"`

	// The name of the Microsoft.ServiceBus topic. If the entity type is of type 'queue', then this value will be null.
	TopicName *string `json:"topicName,omitempty"`
}

// SignalRServiceClientConnectionConnectedEventData - Schema of the Data property of an EventGridEvent for a Microsoft.SignalRService.ClientConnectionConnected
// event.
type SignalRServiceClientConnectionConnectedEventData struct {
	// The connection Id of connected client connection.
	ConnectionID *string `json:"connectionId,omitempty"`

	// The hub of connected client connection.
	HubName *string `json:"hubName,omitempty"`

	// The time at which the event occurred.
	Timestamp *time.Time `json:"timestamp,omitempty"`

	// The user Id of connected client connection.
	UserID *string `json:"userId,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SignalRServiceClientConnectionConnectedEventData.
func (s SignalRServiceClientConnectionConnectedEventData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "connectionId", s.ConnectionID)
	populate(objectMap, "hubName", s.HubName)
	populate(objectMap, "timestamp", (*timeRFC3339)(s.Timestamp))
	populate(objectMap, "userId", s.UserID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SignalRServiceClientConnectionConnectedEventData.
func (s *SignalRServiceClientConnectionConnectedEventData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "connectionId":
				err = unpopulate(val, &s.ConnectionID)
				delete(rawMsg, key)
		case "hubName":
				err = unpopulate(val, &s.HubName)
				delete(rawMsg, key)
		case "timestamp":
				var aux timeRFC3339
				err = unpopulate(val, &aux)
				s.Timestamp = (*time.Time)(&aux)
				delete(rawMsg, key)
		case "userId":
				err = unpopulate(val, &s.UserID)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// SignalRServiceClientConnectionDisconnectedEventData - Schema of the Data property of an EventGridEvent for a Microsoft.SignalRService.ClientConnectionDisconnected
// event.
type SignalRServiceClientConnectionDisconnectedEventData struct {
	// The connection Id of connected client connection.
	ConnectionID *string `json:"connectionId,omitempty"`

	// The message of error that cause the client connection disconnected.
	ErrorMessage *string `json:"errorMessage,omitempty"`

	// The hub of connected client connection.
	HubName *string `json:"hubName,omitempty"`

	// The time at which the event occurred.
	Timestamp *time.Time `json:"timestamp,omitempty"`

	// The user Id of connected client connection.
	UserID *string `json:"userId,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SignalRServiceClientConnectionDisconnectedEventData.
func (s SignalRServiceClientConnectionDisconnectedEventData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "connectionId", s.ConnectionID)
	populate(objectMap, "errorMessage", s.ErrorMessage)
	populate(objectMap, "hubName", s.HubName)
	populate(objectMap, "timestamp", (*timeRFC3339)(s.Timestamp))
	populate(objectMap, "userId", s.UserID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SignalRServiceClientConnectionDisconnectedEventData.
func (s *SignalRServiceClientConnectionDisconnectedEventData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "connectionId":
				err = unpopulate(val, &s.ConnectionID)
				delete(rawMsg, key)
		case "errorMessage":
				err = unpopulate(val, &s.ErrorMessage)
				delete(rawMsg, key)
		case "hubName":
				err = unpopulate(val, &s.HubName)
				delete(rawMsg, key)
		case "timestamp":
				var aux timeRFC3339
				err = unpopulate(val, &aux)
				s.Timestamp = (*time.Time)(&aux)
				delete(rawMsg, key)
		case "userId":
				err = unpopulate(val, &s.UserID)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// StorageAsyncOperationInitiatedEventData - Schema of the Data property of an EventGridEvent for a Microsoft.Storage.AsyncOperationInitiated event.
type StorageAsyncOperationInitiatedEventData struct {
	// The name of the API/operation that triggered this event.
	API *string `json:"api,omitempty"`

	// The type of blob.
	BlobType *string `json:"blobType,omitempty"`

	// A request id provided by the client of the storage API operation that triggered this event.
	ClientRequestID *string `json:"clientRequestId,omitempty"`

	// The size of the blob in bytes. This is the same as what would be returned in the Content-Length header from the blob.
	ContentLength *int64 `json:"contentLength,omitempty"`

	// The content type of the blob. This is the same as what would be returned in the Content-Type header from the blob.
	ContentType *string `json:"contentType,omitempty"`

	// The identity of the requester that triggered this event.
	Identity *string `json:"identity,omitempty"`

	// The request id generated by the Storage service for the storage API operation that triggered this event.
	RequestID *string `json:"requestId,omitempty"`

	// An opaque string value representing the logical sequence of events for any particular blob name. Users can use standard string comparison to understand
// the relative sequence of two events on the same
// blob name.
	Sequencer *string `json:"sequencer,omitempty"`

	// For service use only. Diagnostic data occasionally included by the Azure Storage service. This property should be ignored by event consumers.
	StorageDiagnostics interface{} `json:"storageDiagnostics,omitempty"`

	// The path to the blob.
	URL *string `json:"url,omitempty"`
}

// StorageBlobCreatedEventData - Schema of the Data property of an EventGridEvent for a Microsoft.Storage.BlobCreated event.
type StorageBlobCreatedEventData struct {
	// The name of the API/operation that triggered this event.
	API *string `json:"api,omitempty"`

	// The type of blob.
	BlobType *string `json:"blobType,omitempty"`

	// A request id provided by the client of the storage API operation that triggered this event.
	ClientRequestID *string `json:"clientRequestId,omitempty"`

	// The size of the blob in bytes. This is the same as what would be returned in the Content-Length header from the blob.
	ContentLength *int64 `json:"contentLength,omitempty"`

	// The offset of the blob in bytes.
	ContentOffset *int64 `json:"contentOffset,omitempty"`

	// The content type of the blob. This is the same as what would be returned in the Content-Type header from the blob.
	ContentType *string `json:"contentType,omitempty"`

	// The etag of the blob at the time this event was triggered.
	ETag *string `json:"eTag,omitempty"`

	// The identity of the requester that triggered this event.
	Identity *string `json:"identity,omitempty"`

	// The request id generated by the Storage service for the storage API operation that triggered this event.
	RequestID *string `json:"requestId,omitempty"`

	// An opaque string value representing the logical sequence of events for any particular blob name. Users can use standard string comparison to understand
// the relative sequence of two events on the same
// blob name.
	Sequencer *string `json:"sequencer,omitempty"`

	// For service use only. Diagnostic data occasionally included by the Azure Storage service. This property should be ignored by event consumers.
	StorageDiagnostics interface{} `json:"storageDiagnostics,omitempty"`

	// The path to the blob.
	URL *string `json:"url,omitempty"`
}

// StorageBlobDeletedEventData - Schema of the Data property of an EventGridEvent for a Microsoft.Storage.BlobDeleted event.
type StorageBlobDeletedEventData struct {
	// The name of the API/operation that triggered this event.
	API *string `json:"api,omitempty"`

	// The type of blob.
	BlobType *string `json:"blobType,omitempty"`

	// A request id provided by the client of the storage API operation that triggered this event.
	ClientRequestID *string `json:"clientRequestId,omitempty"`

	// The content type of the blob. This is the same as what would be returned in the Content-Type header from the blob.
	ContentType *string `json:"contentType,omitempty"`

	// The identity of the requester that triggered this event.
	Identity *string `json:"identity,omitempty"`

	// The request id generated by the Storage service for the storage API operation that triggered this event.
	RequestID *string `json:"requestId,omitempty"`

	// An opaque string value representing the logical sequence of events for any particular blob name. Users can use standard string comparison to understand
// the relative sequence of two events on the same
// blob name.
	Sequencer *string `json:"sequencer,omitempty"`

	// For service use only. Diagnostic data occasionally included by the Azure Storage service. This property should be ignored by event consumers.
	StorageDiagnostics interface{} `json:"storageDiagnostics,omitempty"`

	// The path to the blob.
	URL *string `json:"url,omitempty"`
}

// StorageBlobRenamedEventData - Schema of the Data property of an EventGridEvent for a Microsoft.Storage.BlobRenamed event.
type StorageBlobRenamedEventData struct {
	// The name of the API/operation that triggered this event.
	API *string `json:"api,omitempty"`

	// A request id provided by the client of the storage API operation that triggered this event.
	ClientRequestID *string `json:"clientRequestId,omitempty"`

	// The new path to the blob after the rename operation.
	DestinationURL *string `json:"destinationUrl,omitempty"`

	// The identity of the requester that triggered this event.
	Identity *string `json:"identity,omitempty"`

	// The request id generated by the storage service for the storage API operation that triggered this event.
	RequestID *string `json:"requestId,omitempty"`

	// An opaque string value representing the logical sequence of events for any particular blob name. Users can use standard string comparison to understand
// the relative sequence of two events on the same
// blob name.
	Sequencer *string `json:"sequencer,omitempty"`

	// The path to the blob that was renamed.
	SourceURL *string `json:"sourceUrl,omitempty"`

	// For service use only. Diagnostic data occasionally included by the Azure Storage service. This property should be ignored by event consumers.
	StorageDiagnostics interface{} `json:"storageDiagnostics,omitempty"`
}

// StorageBlobTierChangedEventData - Schema of the Data property of an EventGridEvent for a Microsoft.Storage.BlobTierChanged event.
type StorageBlobTierChangedEventData struct {
	// The name of the API/operation that triggered this event.
	API *string `json:"api,omitempty"`

	// The type of blob.
	BlobType *string `json:"blobType,omitempty"`

	// A request id provided by the client of the storage API operation that triggered this event.
	ClientRequestID *string `json:"clientRequestId,omitempty"`

	// The size of the blob in bytes. This is the same as what would be returned in the Content-Length header from the blob.
	ContentLength *int64 `json:"contentLength,omitempty"`

	// The content type of the blob. This is the same as what would be returned in the Content-Type header from the blob.
	ContentType *string `json:"contentType,omitempty"`

	// The identity of the requester that triggered this event.
	Identity *string `json:"identity,omitempty"`

	// The request id generated by the Storage service for the storage API operation that triggered this event.
	RequestID *string `json:"requestId,omitempty"`

	// An opaque string value representing the logical sequence of events for any particular blob name. Users can use standard string comparison to understand
// the relative sequence of two events on the same
// blob name.
	Sequencer *string `json:"sequencer,omitempty"`

	// For service use only. Diagnostic data occasionally included by the Azure Storage service. This property should be ignored by event consumers.
	StorageDiagnostics interface{} `json:"storageDiagnostics,omitempty"`

	// The path to the blob.
	URL *string `json:"url,omitempty"`
}

// StorageDirectoryCreatedEventData - Schema of the Data property of an EventGridEvent for a Microsoft.Storage.DirectoryCreated event.
type StorageDirectoryCreatedEventData struct {
	// The name of the API/operation that triggered this event.
	API *string `json:"api,omitempty"`

	// A request id provided by the client of the storage API operation that triggered this event.
	ClientRequestID *string `json:"clientRequestId,omitempty"`

	// The etag of the directory at the time this event was triggered.
	ETag *string `json:"eTag,omitempty"`

	// The identity of the requester that triggered this event.
	Identity *string `json:"identity,omitempty"`

	// The request id generated by the storage service for the storage API operation that triggered this event.
	RequestID *string `json:"requestId,omitempty"`

	// An opaque string value representing the logical sequence of events for any particular directory name. Users can use standard string comparison to understand
// the relative sequence of two events on the
// same directory name.
	Sequencer *string `json:"sequencer,omitempty"`

	// For service use only. Diagnostic data occasionally included by the Azure Storage service. This property should be ignored by event consumers.
	StorageDiagnostics interface{} `json:"storageDiagnostics,omitempty"`

	// The path to the directory.
	URL *string `json:"url,omitempty"`
}

// StorageDirectoryDeletedEventData - Schema of the Data property of an EventGridEvent for a Microsoft.Storage.DirectoryDeleted event.
type StorageDirectoryDeletedEventData struct {
	// The name of the API/operation that triggered this event.
	API *string `json:"api,omitempty"`

	// A request id provided by the client of the storage API operation that triggered this event.
	ClientRequestID *string `json:"clientRequestId,omitempty"`

	// The identity of the requester that triggered this event.
	Identity *string `json:"identity,omitempty"`

	// Is this event for a recursive delete operation.
	Recursive *bool `json:"recursive,omitempty"`

	// The request id generated by the storage service for the storage API operation that triggered this event.
	RequestID *string `json:"requestId,omitempty"`

	// An opaque string value representing the logical sequence of events for any particular directory name. Users can use standard string comparison to understand
// the relative sequence of two events on the
// same directory name.
	Sequencer *string `json:"sequencer,omitempty"`

	// For service use only. Diagnostic data occasionally included by the Azure Storage service. This property should be ignored by event consumers.
	StorageDiagnostics interface{} `json:"storageDiagnostics,omitempty"`

	// The path to the deleted directory.
	URL *string `json:"url,omitempty"`
}

// StorageDirectoryRenamedEventData - Schema of the Data property of an EventGridEvent for a Microsoft.Storage.DirectoryRenamed event.
type StorageDirectoryRenamedEventData struct {
	// The name of the API/operation that triggered this event.
	API *string `json:"api,omitempty"`

	// A request id provided by the client of the storage API operation that triggered this event.
	ClientRequestID *string `json:"clientRequestId,omitempty"`

	// The new path to the directory after the rename operation.
	DestinationURL *string `json:"destinationUrl,omitempty"`

	// The identity of the requester that triggered this event.
	Identity *string `json:"identity,omitempty"`

	// The request id generated by the storage service for the storage API operation that triggered this event.
	RequestID *string `json:"requestId,omitempty"`

	// An opaque string value representing the logical sequence of events for any particular directory name. Users can use standard string comparison to understand
// the relative sequence of two events on the
// same directory name.
	Sequencer *string `json:"sequencer,omitempty"`

	// The path to the directory that was renamed.
	SourceURL *string `json:"sourceUrl,omitempty"`

	// For service use only. Diagnostic data occasionally included by the Azure Storage service. This property should be ignored by event consumers.
	StorageDiagnostics interface{} `json:"storageDiagnostics,omitempty"`
}

// StorageLifecyclePolicyActionSummaryDetail - Execution statistics of a specific policy action in a Blob Management cycle.
type StorageLifecyclePolicyActionSummaryDetail struct {
	// Error messages of this action if any.
	ErrorList *string `json:"errorList,omitempty"`

	// Number of success operations of this action.
	SuccessCount *int64 `json:"successCount,omitempty"`

	// Total number of objects to be acted on by this action.
	TotalObjectsCount *int64 `json:"totalObjectsCount,omitempty"`
}

// StorageLifecyclePolicyCompletedEventData - Schema of the Data property of an EventGridEvent for a Microsoft.Storage.LifecyclePolicyCompleted event.
type StorageLifecyclePolicyCompletedEventData struct {
	// Execution statistics of a specific policy action in a Blob Management cycle.
	DeleteSummary *StorageLifecyclePolicyActionSummaryDetail `json:"deleteSummary,omitempty"`

	// The time the policy task was scheduled.
	ScheduleTime *string `json:"scheduleTime,omitempty"`

	// Execution statistics of a specific policy action in a Blob Management cycle.
	TierToArchiveSummary *StorageLifecyclePolicyActionSummaryDetail `json:"tierToArchiveSummary,omitempty"`

	// Execution statistics of a specific policy action in a Blob Management cycle.
	TierToCoolSummary *StorageLifecyclePolicyActionSummaryDetail `json:"tierToCoolSummary,omitempty"`
}

// SubscriptionDeletedEventData - Schema of the Data property of an EventGridEvent for a Microsoft.EventGrid.SubscriptionDeletedEvent event.
type SubscriptionDeletedEventData struct {
	// READ-ONLY; The Azure resource ID of the deleted event subscription.
	EventSubscriptionID *string `json:"eventSubscriptionId,omitempty" azure:"ro"`
}

// SubscriptionValidationEventData - Schema of the Data property of an EventGridEvent for a Microsoft.EventGrid.SubscriptionValidationEvent event.
type SubscriptionValidationEventData struct {
	// READ-ONLY; The validation code sent by Azure Event Grid to validate an event subscription. To complete the validation handshake, the subscriber must
// either respond with this validation code as part of the
// validation response, or perform a GET request on the validationUrl (available starting version 2018-05-01-preview).
	ValidationCode *string `json:"validationCode,omitempty" azure:"ro"`

	// READ-ONLY; The validation URL sent by Azure Event Grid (available starting version 2018-05-01-preview). To complete the validation handshake, the subscriber
// must either respond with the validationCode as part of
// the validation response, or perform a GET request on the validationUrl (available starting version 2018-05-01-preview).
	ValidationURL *string `json:"validationUrl,omitempty" azure:"ro"`
}

// SubscriptionValidationResponse - To complete an event subscription validation handshake, a subscriber can use either the validationCode or the validationUrl
// received in a SubscriptionValidationEvent. When the validationCode is used,
// the SubscriptionValidationResponse can be used to build the response.
type SubscriptionValidationResponse struct {
	// The validation response sent by the subscriber to Azure Event Grid to complete the validation of an event subscription.
	ValidationResponse *string `json:"validationResponse,omitempty"`
}

// WebAppServicePlanUpdatedEventData - Schema of the Data property of an EventGridEvent for a Microsoft.Web.AppServicePlanUpdated event.
type WebAppServicePlanUpdatedEventData struct {
	// HTTP request URL of this operation.
	Address *string `json:"address,omitempty"`

	// Detail of action on the app service plan.
	AppServicePlanEventTypeDetail *AppServicePlanEventTypeDetail `json:"appServicePlanEventTypeDetail,omitempty"`

	// The client request id generated by the app service for the app service plan API operation that triggered this event.
	ClientRequestID *string `json:"clientRequestId,omitempty"`

	// The correlation request id generated by the app service for the app service plan API operation that triggered this event.
	CorrelationRequestID *string `json:"correlationRequestId,omitempty"`

	// name of the app service plan that had this event.
	Name *string `json:"name,omitempty"`

	// The request id generated by the app service for the app service plan API operation that triggered this event.
	RequestID *string `json:"requestId,omitempty"`

	// sku of app service plan.
	SKU *WebAppServicePlanUpdatedEventDataSKU `json:"sku,omitempty"`

	// HTTP verb of this operation.
	Verb *string `json:"verb,omitempty"`
}

// WebAppServicePlanUpdatedEventDataSKU - sku of app service plan.
type WebAppServicePlanUpdatedEventDataSKU struct {
	// capacity of app service plan sku.
	Capacity *string `json:"Capacity,omitempty"`

	// family of app service plan sku.
	Family *string `json:"Family,omitempty"`

	// name of app service plan sku.
	Name *string `json:"name,omitempty"`

	// size of app service plan sku.
	Size *string `json:"Size,omitempty"`

	// tier of app service plan sku.
	Tier *string `json:"Tier,omitempty"`
}

// WebAppUpdatedEventData - Schema of the Data property of an EventGridEvent for a Microsoft.Web.AppUpdated event.
type WebAppUpdatedEventData struct {
	// HTTP request URL of this operation.
	Address *string `json:"address,omitempty"`

	// Detail of action on the app.
	AppEventTypeDetail *AppEventTypeDetail `json:"appEventTypeDetail,omitempty"`

	// The client request id generated by the app service for the site API operation that triggered this event.
	ClientRequestID *string `json:"clientRequestId,omitempty"`

	// The correlation request id generated by the app service for the site API operation that triggered this event.
	CorrelationRequestID *string `json:"correlationRequestId,omitempty"`

	// name of the web site that had this event.
	Name *string `json:"name,omitempty"`

	// The request id generated by the app service for the site API operation that triggered this event.
	RequestID *string `json:"requestId,omitempty"`

	// HTTP verb of this operation.
	Verb *string `json:"verb,omitempty"`
}

// WebBackupOperationCompletedEventData - Schema of the Data property of an EventGridEvent for a Microsoft.Web.BackupOperationCompleted event.
type WebBackupOperationCompletedEventData struct {
	// HTTP request URL of this operation.
	Address *string `json:"address,omitempty"`

	// Detail of action on the app.
	AppEventTypeDetail *AppEventTypeDetail `json:"appEventTypeDetail,omitempty"`

	// The client request id generated by the app service for the site API operation that triggered this event.
	ClientRequestID *string `json:"clientRequestId,omitempty"`

	// The correlation request id generated by the app service for the site API operation that triggered this event.
	CorrelationRequestID *string `json:"correlationRequestId,omitempty"`

	// name of the web site that had this event.
	Name *string `json:"name,omitempty"`

	// The request id generated by the app service for the site API operation that triggered this event.
	RequestID *string `json:"requestId,omitempty"`

	// HTTP verb of this operation.
	Verb *string `json:"verb,omitempty"`
}

// WebBackupOperationFailedEventData - Schema of the Data property of an EventGridEvent for a Microsoft.Web.BackupOperationFailed event.
type WebBackupOperationFailedEventData struct {
	// HTTP request URL of this operation.
	Address *string `json:"address,omitempty"`

	// Detail of action on the app.
	AppEventTypeDetail *AppEventTypeDetail `json:"appEventTypeDetail,omitempty"`

	// The client request id generated by the app service for the site API operation that triggered this event.
	ClientRequestID *string `json:"clientRequestId,omitempty"`

	// The correlation request id generated by the app service for the site API operation that triggered this event.
	CorrelationRequestID *string `json:"correlationRequestId,omitempty"`

	// name of the web site that had this event.
	Name *string `json:"name,omitempty"`

	// The request id generated by the app service for the site API operation that triggered this event.
	RequestID *string `json:"requestId,omitempty"`

	// HTTP verb of this operation.
	Verb *string `json:"verb,omitempty"`
}

// WebBackupOperationStartedEventData - Schema of the Data property of an EventGridEvent for a Microsoft.Web.BackupOperationStarted event.
type WebBackupOperationStartedEventData struct {
	// HTTP request URL of this operation.
	Address *string `json:"address,omitempty"`

	// Detail of action on the app.
	AppEventTypeDetail *AppEventTypeDetail `json:"appEventTypeDetail,omitempty"`

	// The client request id generated by the app service for the site API operation that triggered this event.
	ClientRequestID *string `json:"clientRequestId,omitempty"`

	// The correlation request id generated by the app service for the site API operation that triggered this event.
	CorrelationRequestID *string `json:"correlationRequestId,omitempty"`

	// name of the web site that had this event.
	Name *string `json:"name,omitempty"`

	// The request id generated by the app service for the site API operation that triggered this event.
	RequestID *string `json:"requestId,omitempty"`

	// HTTP verb of this operation.
	Verb *string `json:"verb,omitempty"`
}

// WebRestoreOperationCompletedEventData - Schema of the Data property of an EventGridEvent for a Microsoft.Web.RestoreOperationCompleted event.
type WebRestoreOperationCompletedEventData struct {
	// HTTP request URL of this operation.
	Address *string `json:"address,omitempty"`

	// Detail of action on the app.
	AppEventTypeDetail *AppEventTypeDetail `json:"appEventTypeDetail,omitempty"`

	// The client request id generated by the app service for the site API operation that triggered this event.
	ClientRequestID *string `json:"clientRequestId,omitempty"`

	// The correlation request id generated by the app service for the site API operation that triggered this event.
	CorrelationRequestID *string `json:"correlationRequestId,omitempty"`

	// name of the web site that had this event.
	Name *string `json:"name,omitempty"`

	// The request id generated by the app service for the site API operation that triggered this event.
	RequestID *string `json:"requestId,omitempty"`

	// HTTP verb of this operation.
	Verb *string `json:"verb,omitempty"`
}

// WebRestoreOperationFailedEventData - Schema of the Data property of an EventGridEvent for a Microsoft.Web.RestoreOperationFailed event.
type WebRestoreOperationFailedEventData struct {
	// HTTP request URL of this operation.
	Address *string `json:"address,omitempty"`

	// Detail of action on the app.
	AppEventTypeDetail *AppEventTypeDetail `json:"appEventTypeDetail,omitempty"`

	// The client request id generated by the app service for the site API operation that triggered this event.
	ClientRequestID *string `json:"clientRequestId,omitempty"`

	// The correlation request id generated by the app service for the site API operation that triggered this event.
	CorrelationRequestID *string `json:"correlationRequestId,omitempty"`

	// name of the web site that had this event.
	Name *string `json:"name,omitempty"`

	// The request id generated by the app service for the site API operation that triggered this event.
	RequestID *string `json:"requestId,omitempty"`

	// HTTP verb of this operation.
	Verb *string `json:"verb,omitempty"`
}

// WebRestoreOperationStartedEventData - Schema of the Data property of an EventGridEvent for a Microsoft.Web.RestoreOperationStarted event.
type WebRestoreOperationStartedEventData struct {
	// HTTP request URL of this operation.
	Address *string `json:"address,omitempty"`

	// Detail of action on the app.
	AppEventTypeDetail *AppEventTypeDetail `json:"appEventTypeDetail,omitempty"`

	// The client request id generated by the app service for the site API operation that triggered this event.
	ClientRequestID *string `json:"clientRequestId,omitempty"`

	// The correlation request id generated by the app service for the site API operation that triggered this event.
	CorrelationRequestID *string `json:"correlationRequestId,omitempty"`

	// name of the web site that had this event.
	Name *string `json:"name,omitempty"`

	// The request id generated by the app service for the site API operation that triggered this event.
	RequestID *string `json:"requestId,omitempty"`

	// HTTP verb of this operation.
	Verb *string `json:"verb,omitempty"`
}

// WebSlotSwapCompletedEventData - Schema of the Data property of an EventGridEvent for a Microsoft.Web.SlotSwapCompleted event.
type WebSlotSwapCompletedEventData struct {
	// HTTP request URL of this operation.
	Address *string `json:"address,omitempty"`

	// Detail of action on the app.
	AppEventTypeDetail *AppEventTypeDetail `json:"appEventTypeDetail,omitempty"`

	// The client request id generated by the app service for the site API operation that triggered this event.
	ClientRequestID *string `json:"clientRequestId,omitempty"`

	// The correlation request id generated by the app service for the site API operation that triggered this event.
	CorrelationRequestID *string `json:"correlationRequestId,omitempty"`

	// name of the web site that had this event.
	Name *string `json:"name,omitempty"`

	// The request id generated by the app service for the site API operation that triggered this event.
	RequestID *string `json:"requestId,omitempty"`

	// HTTP verb of this operation.
	Verb *string `json:"verb,omitempty"`
}

// WebSlotSwapFailedEventData - Schema of the Data property of an EventGridEvent for a Microsoft.Web.SlotSwapFailed event.
type WebSlotSwapFailedEventData struct {
	// HTTP request URL of this operation.
	Address *string `json:"address,omitempty"`

	// Detail of action on the app.
	AppEventTypeDetail *AppEventTypeDetail `json:"appEventTypeDetail,omitempty"`

	// The client request id generated by the app service for the site API operation that triggered this event.
	ClientRequestID *string `json:"clientRequestId,omitempty"`

	// The correlation request id generated by the app service for the site API operation that triggered this event.
	CorrelationRequestID *string `json:"correlationRequestId,omitempty"`

	// name of the web site that had this event.
	Name *string `json:"name,omitempty"`

	// The request id generated by the app service for the site API operation that triggered this event.
	RequestID *string `json:"requestId,omitempty"`

	// HTTP verb of this operation.
	Verb *string `json:"verb,omitempty"`
}

// WebSlotSwapStartedEventData - Schema of the Data property of an EventGridEvent for a Microsoft.Web.SlotSwapStarted event.
type WebSlotSwapStartedEventData struct {
	// HTTP request URL of this operation.
	Address *string `json:"address,omitempty"`

	// Detail of action on the app.
	AppEventTypeDetail *AppEventTypeDetail `json:"appEventTypeDetail,omitempty"`

	// The client request id generated by the app service for the site API operation that triggered this event.
	ClientRequestID *string `json:"clientRequestId,omitempty"`

	// The correlation request id generated by the app service for the site API operation that triggered this event.
	CorrelationRequestID *string `json:"correlationRequestId,omitempty"`

	// name of the web site that had this event.
	Name *string `json:"name,omitempty"`

	// The request id generated by the app service for the site API operation that triggered this event.
	RequestID *string `json:"requestId,omitempty"`

	// HTTP verb of this operation.
	Verb *string `json:"verb,omitempty"`
}

// WebSlotSwapWithPreviewCancelledEventData - Schema of the Data property of an EventGridEvent for a Microsoft.Web.SlotSwapWithPreviewCancelled event.
type WebSlotSwapWithPreviewCancelledEventData struct {
	// HTTP request URL of this operation.
	Address *string `json:"address,omitempty"`

	// Detail of action on the app.
	AppEventTypeDetail *AppEventTypeDetail `json:"appEventTypeDetail,omitempty"`

	// The client request id generated by the app service for the site API operation that triggered this event.
	ClientRequestID *string `json:"clientRequestId,omitempty"`

	// The correlation request id generated by the app service for the site API operation that triggered this event.
	CorrelationRequestID *string `json:"correlationRequestId,omitempty"`

	// name of the web site that had this event.
	Name *string `json:"name,omitempty"`

	// The request id generated by the app service for the site API operation that triggered this event.
	RequestID *string `json:"requestId,omitempty"`

	// HTTP verb of this operation.
	Verb *string `json:"verb,omitempty"`
}

// WebSlotSwapWithPreviewStartedEventData - Schema of the Data property of an EventGridEvent for a Microsoft.Web.SlotSwapWithPreviewStarted event.
type WebSlotSwapWithPreviewStartedEventData struct {
	// HTTP request URL of this operation.
	Address *string `json:"address,omitempty"`

	// Detail of action on the app.
	AppEventTypeDetail *AppEventTypeDetail `json:"appEventTypeDetail,omitempty"`

	// The client request id generated by the app service for the site API operation that triggered this event.
	ClientRequestID *string `json:"clientRequestId,omitempty"`

	// The correlation request id generated by the app service for the site API operation that triggered this event.
	CorrelationRequestID *string `json:"correlationRequestId,omitempty"`

	// name of the web site that had this event.
	Name *string `json:"name,omitempty"`

	// The request id generated by the app service for the site API operation that triggered this event.
	RequestID *string `json:"requestId,omitempty"`

	// HTTP verb of this operation.
	Verb *string `json:"verb,omitempty"`
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, v interface{}) error {
	if data == nil {
		return nil
	}
	return json.Unmarshal(data, v)
}

