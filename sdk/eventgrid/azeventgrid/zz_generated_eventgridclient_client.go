// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azeventgrid

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
)

type eventGridClient struct {
	con *connection
}

// PublishCloudEventEvents - Publishes a batch of events to an Azure Event Grid topic.
// If the operation fails it returns a generic error.
func (client *eventGridClient) PublishCloudEventEvents(ctx context.Context, events []*CloudEvent, options *EventGridClientPublishCloudEventEventsOptions) (*http.Response, error) {
	req, err := client.publishCloudEventEventsCreateRequest(ctx, events, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.publishCloudEventEventsHandleError(resp)
	}
	return resp.Response, nil
}

// publishCloudEventEventsCreateRequest creates the PublishCloudEventEvents request.
func (client *eventGridClient) publishCloudEventEventsCreateRequest(ctx context.Context, events []*CloudEvent, options *EventGridClientPublishCloudEventEventsOptions) (*azcore.Request, error) {
	req, err := azcore.NewRequest(ctx, http.MethodPost, client.con.Endpoint())
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2018-01-01")
	req.URL.RawQuery = reqQP.Encode()
	return req, req.MarshalAsJSON(events)
}

// publishCloudEventEventsHandleError handles the PublishCloudEventEvents error response.
func (client *eventGridClient) publishCloudEventEventsHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
		if len(body) == 0 {
      return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
    }
    return azcore.NewResponseError(errors.New(string(body)), resp.Response)
    }

// PublishCustomEventEvents - Publishes a batch of events to an Azure Event Grid topic.
// If the operation fails it returns a generic error.
func (client *eventGridClient) PublishCustomEventEvents(ctx context.Context, events []interface{}, options *EventGridClientPublishCustomEventEventsOptions) (*http.Response, error) {
	req, err := client.publishCustomEventEventsCreateRequest(ctx, events, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.publishCustomEventEventsHandleError(resp)
	}
	return resp.Response, nil
}

// publishCustomEventEventsCreateRequest creates the PublishCustomEventEvents request.
func (client *eventGridClient) publishCustomEventEventsCreateRequest(ctx context.Context, events []interface{}, options *EventGridClientPublishCustomEventEventsOptions) (*azcore.Request, error) {
	req, err := azcore.NewRequest(ctx, http.MethodPost, client.con.Endpoint())
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2018-01-01")
	req.URL.RawQuery = reqQP.Encode()
	return req, req.MarshalAsJSON(events)
}

// publishCustomEventEventsHandleError handles the PublishCustomEventEvents error response.
func (client *eventGridClient) publishCustomEventEventsHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
		if len(body) == 0 {
      return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
    }
    return azcore.NewResponseError(errors.New(string(body)), resp.Response)
    }

// PublishEvents - Publishes a batch of events to an Azure Event Grid topic.
// If the operation fails it returns a generic error.
func (client *eventGridClient) PublishEvents(ctx context.Context, events []*EventGridEvent, options *EventGridClientPublishEventsOptions) (*http.Response, error) {
	req, err := client.publishEventsCreateRequest(ctx, events, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.publishEventsHandleError(resp)
	}
	return resp.Response, nil
}

// publishEventsCreateRequest creates the PublishEvents request.
func (client *eventGridClient) publishEventsCreateRequest(ctx context.Context, events []*EventGridEvent, options *EventGridClientPublishEventsOptions) (*azcore.Request, error) {
	req, err := azcore.NewRequest(ctx, http.MethodPost, client.con.Endpoint())
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2018-01-01")
	req.URL.RawQuery = reqQP.Encode()
	return req, req.MarshalAsJSON(events)
}

// publishEventsHandleError handles the PublishEvents error response.
func (client *eventGridClient) publishEventsHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
		if len(body) == 0 {
      return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
    }
    return azcore.NewResponseError(errors.New(string(body)), resp.Response)
    }

