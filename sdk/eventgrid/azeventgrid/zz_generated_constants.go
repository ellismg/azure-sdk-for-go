// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azeventgrid

// AppAction - Type of action of the operation.
type AppAction string

const (
	// AppActionChangedAppSettings - There was an operation to change app setting on the web app.
	AppActionChangedAppSettings AppAction = "ChangedAppSettings"
	// AppActionCompleted - The job has completed.
	AppActionCompleted AppAction = "Completed"
	// AppActionFailed - The job has failed to complete.
	AppActionFailed AppAction = "Failed"
	// AppActionRestarted - Web app was restarted.
	AppActionRestarted AppAction = "Restarted"
	// AppActionStarted - The job has started.
	AppActionStarted AppAction = "Started"
	// AppActionStopped - Web app was stopped.
	AppActionStopped AppAction = "Stopped"
)

// PossibleAppActionValues returns the possible values for the AppAction const type.
func PossibleAppActionValues() []AppAction {
	return []AppAction{	
		AppActionChangedAppSettings,
		AppActionCompleted,
		AppActionFailed,
		AppActionRestarted,
		AppActionStarted,
		AppActionStopped,
	}
}

// ToPtr returns a *AppAction pointing to the current value.
func (c AppAction) ToPtr() *AppAction {
	return &c
}

// AppServicePlanAction - Type of action on the app service plan.
type AppServicePlanAction string

const (
	// AppServicePlanActionUpdated - App Service plan is being updated.
	AppServicePlanActionUpdated AppServicePlanAction = "Updated"
)

// PossibleAppServicePlanActionValues returns the possible values for the AppServicePlanAction const type.
func PossibleAppServicePlanActionValues() []AppServicePlanAction {
	return []AppServicePlanAction{	
		AppServicePlanActionUpdated,
	}
}

// ToPtr returns a *AppServicePlanAction pointing to the current value.
func (c AppServicePlanAction) ToPtr() *AppServicePlanAction {
	return &c
}

// AsyncStatus - Asynchronous operation status of the operation on the app service plan.
type AsyncStatus string

const (
	// AsyncStatusCompleted - Async operation has completed.
	AsyncStatusCompleted AsyncStatus = "Completed"
	// AsyncStatusFailed - Async operation failed to complete.
	AsyncStatusFailed AsyncStatus = "Failed"
	// AsyncStatusStarted - Async operation has started.
	AsyncStatusStarted AsyncStatus = "Started"
)

// PossibleAsyncStatusValues returns the possible values for the AsyncStatus const type.
func PossibleAsyncStatusValues() []AsyncStatus {
	return []AsyncStatus{	
		AsyncStatusCompleted,
		AsyncStatusFailed,
		AsyncStatusStarted,
	}
}

// ToPtr returns a *AsyncStatus pointing to the current value.
func (c AsyncStatus) ToPtr() *AsyncStatus {
	return &c
}

// CommunicationCloudEnvironmentModel - The cloud that the identifier belongs to.
type CommunicationCloudEnvironmentModel string

const (
	CommunicationCloudEnvironmentModelDod CommunicationCloudEnvironmentModel = "dod"
	CommunicationCloudEnvironmentModelGcch CommunicationCloudEnvironmentModel = "gcch"
	CommunicationCloudEnvironmentModelPublic CommunicationCloudEnvironmentModel = "public"
)

// PossibleCommunicationCloudEnvironmentModelValues returns the possible values for the CommunicationCloudEnvironmentModel const type.
func PossibleCommunicationCloudEnvironmentModelValues() []CommunicationCloudEnvironmentModel {
	return []CommunicationCloudEnvironmentModel{	
		CommunicationCloudEnvironmentModelDod,
		CommunicationCloudEnvironmentModelGcch,
		CommunicationCloudEnvironmentModelPublic,
	}
}

// ToPtr returns a *CommunicationCloudEnvironmentModel pointing to the current value.
func (c CommunicationCloudEnvironmentModel) ToPtr() *CommunicationCloudEnvironmentModel {
	return &c
}

// MediaJobErrorCategory - Helps with categorization of errors.
type MediaJobErrorCategory string

const (
	// MediaJobErrorCategoryService - The error is service related.
	MediaJobErrorCategoryService MediaJobErrorCategory = "Service"
	// MediaJobErrorCategoryDownload - The error is download related.
	MediaJobErrorCategoryDownload MediaJobErrorCategory = "Download"
	// MediaJobErrorCategoryUpload - The error is upload related.
	MediaJobErrorCategoryUpload MediaJobErrorCategory = "Upload"
	// MediaJobErrorCategoryConfiguration - The error is configuration related.
	MediaJobErrorCategoryConfiguration MediaJobErrorCategory = "Configuration"
	// MediaJobErrorCategoryContent - The error is related to data in the input files.
	MediaJobErrorCategoryContent MediaJobErrorCategory = "Content"
)

// PossibleMediaJobErrorCategoryValues returns the possible values for the MediaJobErrorCategory const type.
func PossibleMediaJobErrorCategoryValues() []MediaJobErrorCategory {
	return []MediaJobErrorCategory{	
		MediaJobErrorCategoryService,
		MediaJobErrorCategoryDownload,
		MediaJobErrorCategoryUpload,
		MediaJobErrorCategoryConfiguration,
		MediaJobErrorCategoryContent,
	}
}

// ToPtr returns a *MediaJobErrorCategory pointing to the current value.
func (c MediaJobErrorCategory) ToPtr() *MediaJobErrorCategory {
	return &c
}

// MediaJobErrorCode - Error code describing the error.
type MediaJobErrorCode string

const (
	// MediaJobErrorCodeServiceError - Fatal service error, please contact support.
	MediaJobErrorCodeServiceError MediaJobErrorCode = "ServiceError"
	// MediaJobErrorCodeServiceTransientError - Transient error, please retry, if retry is unsuccessful, please contact support.
	MediaJobErrorCodeServiceTransientError MediaJobErrorCode = "ServiceTransientError"
	// MediaJobErrorCodeDownloadNotAccessible - While trying to download the input files, the files were not accessible, please check the availability of the
// source.
	MediaJobErrorCodeDownloadNotAccessible MediaJobErrorCode = "DownloadNotAccessible"
	// MediaJobErrorCodeDownloadTransientError - While trying to download the input files, there was an issue during transfer (storage service, network errors),
// see details and check your source.
	MediaJobErrorCodeDownloadTransientError MediaJobErrorCode = "DownloadTransientError"
	// MediaJobErrorCodeUploadNotAccessible - While trying to upload the output files, the destination was not reachable, please check the availability of the
// destination.
	MediaJobErrorCodeUploadNotAccessible MediaJobErrorCode = "UploadNotAccessible"
	// MediaJobErrorCodeUploadTransientError - While trying to upload the output files, there was an issue during transfer (storage service, network errors),
// see details and check your destination.
	MediaJobErrorCodeUploadTransientError MediaJobErrorCode = "UploadTransientError"
	// MediaJobErrorCodeConfigurationUnsupported - There was a problem with the combination of input files and the configuration settings applied, fix the configuration
// settings and retry with the same input, or change input to match the configuration.
	MediaJobErrorCodeConfigurationUnsupported MediaJobErrorCode = "ConfigurationUnsupported"
	// MediaJobErrorCodeContentMalformed - There was a problem with the input content (for example: zero byte files, or corrupt/non-decodable files), check
// the input files.
	MediaJobErrorCodeContentMalformed MediaJobErrorCode = "ContentMalformed"
	// MediaJobErrorCodeContentUnsupported - There was a problem with the format of the input (not valid media file, or an unsupported file/codec), check the
// validity of the input files.
	MediaJobErrorCodeContentUnsupported MediaJobErrorCode = "ContentUnsupported"
)

// PossibleMediaJobErrorCodeValues returns the possible values for the MediaJobErrorCode const type.
func PossibleMediaJobErrorCodeValues() []MediaJobErrorCode {
	return []MediaJobErrorCode{	
		MediaJobErrorCodeServiceError,
		MediaJobErrorCodeServiceTransientError,
		MediaJobErrorCodeDownloadNotAccessible,
		MediaJobErrorCodeDownloadTransientError,
		MediaJobErrorCodeUploadNotAccessible,
		MediaJobErrorCodeUploadTransientError,
		MediaJobErrorCodeConfigurationUnsupported,
		MediaJobErrorCodeContentMalformed,
		MediaJobErrorCodeContentUnsupported,
	}
}

// ToPtr returns a *MediaJobErrorCode pointing to the current value.
func (c MediaJobErrorCode) ToPtr() *MediaJobErrorCode {
	return &c
}

// MediaJobRetry - Indicates that it may be possible to retry the Job. If retry is unsuccessful, please contact Azure support via Azure Portal.
type MediaJobRetry string

const (
	// MediaJobRetryDoNotRetry - Issue needs to be investigated and then the job resubmitted with corrections or retried once the underlying issue has been
// corrected.
	MediaJobRetryDoNotRetry MediaJobRetry = "DoNotRetry"
	// MediaJobRetryMayRetry - Issue may be resolved after waiting for a period of time and resubmitting the same Job.
	MediaJobRetryMayRetry MediaJobRetry = "MayRetry"
)

// PossibleMediaJobRetryValues returns the possible values for the MediaJobRetry const type.
func PossibleMediaJobRetryValues() []MediaJobRetry {
	return []MediaJobRetry{	
		MediaJobRetryDoNotRetry,
		MediaJobRetryMayRetry,
	}
}

// ToPtr returns a *MediaJobRetry pointing to the current value.
func (c MediaJobRetry) ToPtr() *MediaJobRetry {
	return &c
}

// MediaJobState - The previous state of the Job.
type MediaJobState string

const (
	// MediaJobStateCanceled - The job was canceled. This is a final state for the job.
	MediaJobStateCanceled MediaJobState = "Canceled"
	// MediaJobStateCanceling - The job is in the process of being canceled. This is a transient state for the job.
	MediaJobStateCanceling MediaJobState = "Canceling"
	// MediaJobStateError - The job has encountered an error. This is a final state for the job.
	MediaJobStateError MediaJobState = "Error"
	// MediaJobStateFinished - The job is finished. This is a final state for the job.
	MediaJobStateFinished MediaJobState = "Finished"
	// MediaJobStateProcessing - The job is processing. This is a transient state for the job.
	MediaJobStateProcessing MediaJobState = "Processing"
	// MediaJobStateQueued - The job is in a queued state, waiting for resources to become available. This is a transient state.
	MediaJobStateQueued MediaJobState = "Queued"
	// MediaJobStateScheduled - The job is being scheduled to run on an available resource. This is a transient state, between queued and processing states.
	MediaJobStateScheduled MediaJobState = "Scheduled"
)

// PossibleMediaJobStateValues returns the possible values for the MediaJobState const type.
func PossibleMediaJobStateValues() []MediaJobState {
	return []MediaJobState{	
		MediaJobStateCanceled,
		MediaJobStateCanceling,
		MediaJobStateError,
		MediaJobStateFinished,
		MediaJobStateProcessing,
		MediaJobStateQueued,
		MediaJobStateScheduled,
	}
}

// ToPtr returns a *MediaJobState pointing to the current value.
func (c MediaJobState) ToPtr() *MediaJobState {
	return &c
}

// StampKind - Kind of environment where app service plan is.
type StampKind string

const (
	// StampKindAseV1 - App Service Plan is running on an App Service Environment V1.
	StampKindAseV1 StampKind = "AseV1"
	// StampKindAseV2 - App Service Plan is running on an App Service Environment V2.
	StampKindAseV2 StampKind = "AseV2"
	// StampKindPublic - App Service Plan is running on a public stamp.
	StampKindPublic StampKind = "Public"
)

// PossibleStampKindValues returns the possible values for the StampKind const type.
func PossibleStampKindValues() []StampKind {
	return []StampKind{	
		StampKindAseV1,
		StampKindAseV2,
		StampKindPublic,
	}
}

// ToPtr returns a *StampKind pointing to the current value.
func (c StampKind) ToPtr() *StampKind {
	return &c
}

